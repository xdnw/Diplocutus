import nu.studer.gradle.jooq.JooqEdition

buildscript {
    ext.kotlin_version = '1.7.10'
    repositories {
        mavenCentral()
        gradlePluginPortal()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
//        classpath "io.jooby:jooby-gradle-plugin:2.8.5"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath 'org.jooq:jooq-codegen:3.17.5'
        classpath 'org.xerial:sqlite-jdbc:3.36.0.3'
        classpath 'com.gradleup.shadow:shadow-gradle-plugin:8.3.0'
    }
}

plugins {
    id 'java'
    id "idea"
    id 'com.gradleup.shadow' version '8.3.0'
    id "nu.studer.jooq" version "8.0"
    id 'maven-publish'
}

apply plugin: "kotlin"
apply plugin: 'java'
//apply plugin: "nebula.lint"

//gradleLint {
//    rules=['unused-dependency']
//}

group 'link.locutus'
version '1.0-SNAPSHOT'

java {
    toolchain {
        languageVersion.set(JavaLanguageVersion.of(22))
    }
}

publishing {
    repositories {
        maven {
            name = "GitHubPackages"
            url = "https://maven.pkg.github.com/xdnw/locutus"
            credentials {
                username = System.getenv("GITHUB_ACTOR")
                password = System.getenv("GITHUB_TOKEN")
            }
        }
    }
}

repositories {
    mavenLocal()
    mavenCentral()
    maven {
        url "https://zoidberg.ukp.informatik.tu-darmstadt.de/artifactory/public-releases/"
    }
    maven {
        name 'm2-dv8tion'
        url 'https://m2.dv8tion.net/releases'
    }
    maven {
        url "https://repo1.maven.org/maven2"
    }
//    maven {
//        name = "GitHubPackages-pw4j"
//        url "https://maven.pkg.github.com/l0llygag/pw4j"
//        credentials {
//            username = System.getenv("GITHUB_USERNAME")
//            password = System.getenv("GITHUB_TOKEN")
//        }
//    }
    flatDir {
        dirs 'libs'
    }
    gradlePluginPortal()

    maven { url 'https://jitpack.io' }
    maven { url 'https://raw.github.com/AcaiSoftware/chatgpt-java/repository/' }
    maven { url 'https://oss.sonatype.org/content/repositories/snapshots/' }
}

//compileJava.options.compilerArgs.add '-parameters'
//compileTestJava.options.compilerArgs.add '-parameters'
compileJava {
    options.compilerArgs << '-parameters' << '-Xmaxerrs' << '99999' << '-Xmaxwarns' << '2000'
}

compileTestJava {
    options.compilerArgs << '-parameters' << '-Xmaxerrs' << '99999' << '-Xmaxwarns' << '2000'
}

import org.gradle.nativeplatform.platform.internal.Architectures
import org.gradle.nativeplatform.platform.internal.DefaultNativePlatform

def brotliVersion = "1.15.0"
def operatingSystem = DefaultNativePlatform.getCurrentOperatingSystem()
def currentArchitecture = DefaultNativePlatform.getCurrentArchitecture()

dependencies {
    implementation 'org.lz4:lz4-java:1.8.0'
    implementation 'com.vladsch.flexmark:flexmark-all:0.64.8'
    implementation 'org.jgrapht:jgrapht-core:1.5.2'
    implementation 'org.jgrapht:jgrapht-ext:1.5.2'
    implementation 'com.amazonaws:aws-java-sdk-bom:1.12.649'
    implementation 'com.amazonaws:aws-java-sdk-s3:1.12.649'

    implementation 'org.apache.logging.log4j:log4j-core:2.23.1'
    implementation 'org.apache.logging.log4j:log4j-api:2.13.3'
    implementation 'commons-logging:commons-logging:1.3.4'


    implementation 'com.pusher:pusher-java-client:2.4.4'

    implementation 'de.vandermeer:asciitable:0.3.2'

    implementation 'com.google.http-client:google-http-client-jackson2:1.43.3'

    implementation('org.xerial:sqlite-jdbc:3.46.1.0')
    implementation 'com.google.code.gson:gson:2.8.9'
    implementation 'org.jsoup:jsoup:1.12.1'
    implementation 'org.bitbucket.cowwoc:diff-match-patch:1.2'

    implementation ('net.dv8tion:JDA:5.0.0-beta.20') {
        exclude module: 'opus-java'
    }
    implementation group: 'club.minnced', name: 'discord-webhooks', version: '0.8.4'


    implementation 'org.yaml:snakeyaml:1.29'
    implementation 'io.javalin:javalin:5.6.3'
    implementation 'io.javalin.community.ssl:ssl-plugin:5.6.3'
    implementation 'io.javalin:javalin-rendering:5.6.3'

//    implementation 'com.nixxcode.jvmbrotli:jvmbrotli:0.2.0'
    implementation "com.aayushatharva.brotli4j:brotli4j:$brotliVersion"
    runtimeOnly("""com.aayushatharva.brotli4j:native-windows-x86_64:$brotliVersion""")

    implementation 'com.ptsmods:mysqlw:1.7'
    implementation 'org.openjdk.nashorn:nashorn-core:15.4'

    implementation 'com.google.api-client:google-api-client:2.0.0'
    implementation 'com.google.oauth-client:google-oauth-client-jetty:1.34.1'
    implementation 'com.google.apis:google-api-services-sheets:v4-rev20220927-2.0.0'
    implementation 'com.google.apis:google-api-services-drive:v3-rev20220815-2.0.0'
    implementation 'com.google.apis:google-api-services-docs:v1-rev20220609-2.0.0'
    implementation 'de.erichseifert.gral:gral-core:0.11'

    implementation ('com.inversoft:prime-transformer:2.1.4') {
        exclude group: 'org.freemarker'
    }


    // https://mvnrepository.com/artifact/it.unimi.dsi/fastutil
    implementation group: 'it.unimi.dsi', name: 'fastutil', version: '8.2.1'

    // https://mvnrepository.com/artifact/com.opencsv/opencsv
    implementation group: 'com.opencsv', name: 'opencsv', version: '3.7'

//    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    implementation 'in.wilsonl.minifyhtml:minify-html:0.15.0'

//    implementation "org.springframework.boot:spring-boot-starter-web:2.4.4"
//    implementation "org.springframework.boot:spring-boot-starter-data-mongodb:2.4.4"

    implementation "com.graphql-java-kickstart:graphql-spring-boot-starter:11.1.0"
//    implementation 'org.springframework:spring-web:6.1.3'


    implementation "org.apache.httpcomponents:httpclient:4.5.13"
    implementation "javax.validation:validation-api:2.0.1.Final"

//    implementation "org.mapstruct:mapstruct:1.4.2.Final"
//    annotationProcessor "org.mapstruct:mapstruct-processor:1.4.2.Final"
    implementation group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.17.2'

    // https://mvnrepository.com/artifact/de.siegmar/fastcsv
    implementation group: 'de.siegmar', name: 'fastcsv', version: '2.2.0'


    implementation('org.hibernate:hibernate-core:6.1.5.Final')
    implementation('org.hibernate:hibernate-community-dialects:6.1.5.Final')

    implementation('org.jooq:jooq:3.17.5')
    implementation("org.jooq:jooq-meta:3.17.5")
    implementation("org.jooq:jooq-codegen:3.17.5")


    implementation("com.theokanning.openai-gpt3-java:client:0.18.2")
    implementation("com.theokanning.openai-gpt3-java:service:0.18.2")
    implementation("com.theokanning.openai-gpt3-java:api:0.18.2")

//    implementation 'com.github.javaparser:javaparser-symbol-solver-core:3.25.3'
//    implementation 'com.github.javaparser:javaparser-core:3.25.3'
    implementation 'com.knuddels:jtokkit:0.6.1'
    // https://mvnrepository.com/artifact/org.tensorflow/tensorflow
//    implementation 'org.tensorflow:tensorflow:1.15.0'
//    implementation 'org.apache.commons:commons-lang3:3.12.0'
    // https://mvnrepository.com/artifact/org.apache.commons/commons-text
//    implementation 'org.apache.commons:commons-text:1.10.0'
    implementation 'gg.acai:chatgpt-java:1.0.2'
    implementation platform("ai.djl:bom:0.22.1")
    implementation "ai.djl:api:0.22.1"
    runtimeOnly "ai.djl.pytorch:pytorch-engine:0.28.0"
    runtimeOnly "ai.djl.pytorch:pytorch-model-zoo:0.28.0"
    implementation "ai.djl.huggingface:tokenizers:0.28.0"
    runtimeOnly 'ai.djl.pytorch:pytorch-native-cu121:2.2.2:win-x86_64'
    runtimeOnly 'ai.djl.pytorch:pytorch-jni:2.2.2-0.28.0'
//    implementation 'net.sourceforge.tess4j:tess4j:4.5.1'
//    implementation 'org.bytedeco:javacv:1.5.6'
    implementation 'cn.easyproject:easyocr:3.0.4-RELEASE'
    implementation 'com.vdurmont:emoji-java:5.1.1'
    implementation 'info.debatty:java-string-similarity:2.0.0'
}

configurations {
    all {
        exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
    }
}

jooq {
    version = "3.17.5"  // default (can be omitted)
    edition = JooqEdition.OSS  // default (can be omitted)
    configurations {
        bank {
            generateSchemaSourceOnCompilation = false; // default (can be omitted)

            generationTool {
                jdbc {
                    driver = 'org.sqlite.JDBC'
                    url = 'jdbc:sqlite:database/bank.db'
                }
                generator {
                    name = 'org.jooq.codegen.DefaultGenerator'
                    database {
                        name = 'org.jooq.meta.sqlite.SQLiteDatabase'
                    }
                    generate {
                        deprecated = false
                        records = true
                        immutablePojos = true
                        fluentSetters = true
                    }
                    target {

                        packageName = 'org.example.jooq.bank'
                    }
                    strategy.name = "org.jooq.codegen.DefaultGeneratorStrategy"
                }
            }
        }

        locutus {
            generateSchemaSourceOnCompilation = false; // default (can be omitted)

            generationTool {
                jdbc {
                    driver = 'org.sqlite.JDBC'
                    url = 'jdbc:sqlite:database/locutus.db'
                }
                generator {
                    name = 'org.jooq.codegen.DefaultGenerator'
                    database {
                        name = 'org.jooq.meta.sqlite.SQLiteDatabase'
                    }
                    generate {
                        deprecated = false
                        records = true
                        immutablePojos = true
                        fluentSetters = true
                    }
                    target {
                        packageName = 'org.example.jooq.locutus'
                    }
                    strategy.name = "org.jooq.codegen.DefaultGeneratorStrategy"
                }
            }
        }

        nations {
            generateSchemaSourceOnCompilation = false; // default (can be omitted)

            generationTool {
                jdbc {
                    driver = 'org.sqlite.JDBC'
                    url = 'jdbc:sqlite:database/nations.db'
                }
                generator {
                    name = 'org.jooq.codegen.DefaultGenerator'
                    database {
                        name = 'org.jooq.meta.sqlite.SQLiteDatabase'
                    }
                    generate {
                        deprecated = false
                        records = true
                        immutablePojos = true
                        fluentSetters = true
                    }
                    target {
                        packageName = 'org.example.jooq.nations'
                    }
                    strategy.name = "org.jooq.codegen.DefaultGeneratorStrategy"
                }
            }
        }

        trade {
            generateSchemaSourceOnCompilation = false; // default (can be omitted)

            generationTool {
                jdbc {
                    driver = 'org.sqlite.JDBC'
                    url = 'jdbc:sqlite:database/trade.db'
                }
                generator {
                    name = 'org.jooq.codegen.DefaultGenerator'
                    database {
                        name = 'org.jooq.meta.sqlite.SQLiteDatabase'
                    }
                    generate {
                        deprecated = false
                        records = true
                        immutablePojos = true
                        fluentSetters = true
                    }
                    target {
                        packageName = 'org.example.jooq.trade'
                    }
                    strategy.name = "org.jooq.codegen.DefaultGeneratorStrategy"
                }
            }
        }

        war {
            generateSchemaSourceOnCompilation = false; // default (can be omitted)

            generationTool {
                jdbc {
                    driver = 'org.sqlite.JDBC'
                    url = 'jdbc:sqlite:database/war.db'
                }
                generator {
                    name = 'org.jooq.codegen.DefaultGenerator'
                    database {
                        name = 'org.jooq.meta.sqlite.SQLiteDatabase'
                    }
                    generate {
                        deprecated = false
                        records = true
                        immutablePojos = true
                        fluentSetters = true
                    }
                    target {
                        packageName = 'org.example.jooq.war'
                    }
                    strategy.name = "org.jooq.codegen.DefaultGeneratorStrategy"
                }
            }
        }

        web {
            generateSchemaSourceOnCompilation = false; // default (can be omitted)

            generationTool {
                jdbc {
                    driver = 'org.sqlite.JDBC'
                    url = 'jdbc:sqlite:database/web.db'
                }
                generator {
                    name = 'org.jooq.codegen.DefaultGenerator'
                    database {
                        name = 'org.jooq.meta.sqlite.SQLiteDatabase'
                    }
                    generate {
                        deprecated = false
                        records = true
                        immutablePojos = true
                        fluentSetters = true
                    }
                    target {
                        packageName = 'org.example.jooq.web'
                    }
                    strategy.name = "org.jooq.codegen.DefaultGeneratorStrategy"
                }
            }
        }
    }
}


/**
 * Generate requests and model from external service
 */

sourceSets {
    main {
        java {
            srcDirs 'src/main/java'
            srcDirs "$buildDir/generated"
            srcDirs "$buildDir/generated-src"
            srcDirs "$buildDir/generated-sources"
        }
        resources {
            srcDirs "src/main/resources/log"
            srcDirs "src/main/resources/css"
            srcDirs "src/main/resources/js"
            srcDirs "src/main/resources/img"
        }
    }
}

//sourceSets.main.java.srcDirs (
//        tasks.named('generateBankJooq').flatMap { it.outputDir },
//        tasks.named('generateLocutusJooq').flatMap { it.outputDir },
//        tasks.named('generateNationsJooq').flatMap { it.outputDir },
//        tasks.named('generateTradeJooq').flatMap { it.outputDir },
//        tasks.named('generateWarJooq').flatMap { it.outputDir },
//        tasks.named('generateWebJooq').flatMap { it.outputDir }
//)

jar {
    from('src/main/resources/') {
        include 'lib/win32-x86-amd64/brotli.dll'
    }
    manifest {
        attributes(
                'Class-Path': configurations.runtimeClasspath.files.collect { it.getName() }.join(' '),
                'Main-Class': 'link.locutus.discord.Locutus'
        )
    }
}

shadowJar {
//    minimize()
    zip64=true
    archiveBaseName = "${name}-${project.name}"
}

build.dependsOn(shadowJar);

task findDependency {
    doLast {
        configurations.compileClasspath.resolvedConfiguration.firstLevelModuleDependencies.each { dependency ->
             dependency.moduleArtifacts.each { artifact ->
                def id = artifact.moduleVersion.id
                if (id.name == 'ST4' || true) {
                    println "Group: ${id.group}, Name: ${id.name}, Version: ${id.version}"
//                    iterate dependency.children
                    for (child in dependency.children) {
                        println "Child: ${child}"
                    }
                }
            }
        }
    }
}