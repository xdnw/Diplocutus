/*
 * This file is generated by jOOQ.
 */
package org.example.jooq.nations.tables.records;


import org.example.jooq.nations.tables.NationMeta;
import org.jooq.Field;
import org.jooq.Record2;
import org.jooq.Record3;
import org.jooq.Row3;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class NationMetaRecord extends UpdatableRecordImpl<NationMetaRecord> implements Record3<Long, Long, byte[]> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>NATION_META.id</code>.
     */
    public NationMetaRecord setId(Long value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>NATION_META.id</code>.
     */
    public Long getId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>NATION_META.key</code>.
     */
    public NationMetaRecord setKey(Long value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>NATION_META.key</code>.
     */
    public Long getKey() {
        return (Long) get(1);
    }

    /**
     * Setter for <code>NATION_META.meta</code>.
     */
    public NationMetaRecord setMeta(byte[] value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>NATION_META.meta</code>.
     */
    public byte[] getMeta() {
        return (byte[]) get(2);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record2<Long, Long> key() {
        return (Record2) super.key();
    }

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row3<Long, Long, byte[]> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    @Override
    public Row3<Long, Long, byte[]> valuesRow() {
        return (Row3) super.valuesRow();
    }

    @Override
    public Field<Long> field1() {
        return NationMeta.NATION_META.ID;
    }

    @Override
    public Field<Long> field2() {
        return NationMeta.NATION_META.KEY;
    }

    @Override
    public Field<byte[]> field3() {
        return NationMeta.NATION_META.META;
    }

    @Override
    public Long component1() {
        return getId();
    }

    @Override
    public Long component2() {
        return getKey();
    }

    @Override
    public byte[] component3() {
        return getMeta();
    }

    @Override
    public Long value1() {
        return getId();
    }

    @Override
    public Long value2() {
        return getKey();
    }

    @Override
    public byte[] value3() {
        return getMeta();
    }

    @Override
    public NationMetaRecord value1(Long value) {
        setId(value);
        return this;
    }

    @Override
    public NationMetaRecord value2(Long value) {
        setKey(value);
        return this;
    }

    @Override
    public NationMetaRecord value3(byte[] value) {
        setMeta(value);
        return this;
    }

    @Override
    public NationMetaRecord values(Long value1, Long value2, byte[] value3) {
        value1(value1);
        value2(value2);
        value3(value3);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached NationMetaRecord
     */
    public NationMetaRecord() {
        super(NationMeta.NATION_META);
    }

    /**
     * Create a detached, initialised NationMetaRecord
     */
    public NationMetaRecord(Long id, Long key, byte[] meta) {
        super(NationMeta.NATION_META);

        setId(id);
        setKey(key);
        setMeta(meta);
    }

    /**
     * Create a detached, initialised NationMetaRecord
     */
    public NationMetaRecord(org.example.jooq.nations.tables.pojos.NationMeta value) {
        super(NationMeta.NATION_META);

        if (value != null) {
            setId(value.getId());
            setKey(value.getKey());
            setMeta(value.getMeta());
        }
    }
}
