/*
 * This file is generated by jOOQ.
 */
package org.example.jooq.nations.tables;


import java.util.function.Function;

import org.example.jooq.nations.DefaultSchema;
import org.example.jooq.nations.Keys;
import org.example.jooq.nations.tables.records.SpyActivityRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function5;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SpyActivity extends TableImpl<SpyActivityRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>spy_activity</code>
     */
    public static final SpyActivity SPY_ACTIVITY = new SpyActivity();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SpyActivityRecord> getRecordType() {
        return SpyActivityRecord.class;
    }

    /**
     * The column <code>spy_activity.nation</code>.
     */
    public final TableField<SpyActivityRecord, Integer> NATION = createField(DSL.name("nation"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>spy_activity.timestamp</code>.
     */
    public final TableField<SpyActivityRecord, Long> TIMESTAMP = createField(DSL.name("timestamp"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>spy_activity.projects</code>.
     */
    public final TableField<SpyActivityRecord, Long> PROJECTS = createField(DSL.name("projects"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>spy_activity.change</code>.
     */
    public final TableField<SpyActivityRecord, Long> CHANGE = createField(DSL.name("change"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>spy_activity.spies</code>.
     */
    public final TableField<SpyActivityRecord, Integer> SPIES = createField(DSL.name("spies"), SQLDataType.INTEGER.nullable(false), this, "");

    private SpyActivity(Name alias, Table<SpyActivityRecord> aliased) {
        this(alias, aliased, null);
    }

    private SpyActivity(Name alias, Table<SpyActivityRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>spy_activity</code> table reference
     */
    public SpyActivity(String alias) {
        this(DSL.name(alias), SPY_ACTIVITY);
    }

    /**
     * Create an aliased <code>spy_activity</code> table reference
     */
    public SpyActivity(Name alias) {
        this(alias, SPY_ACTIVITY);
    }

    /**
     * Create a <code>spy_activity</code> table reference
     */
    public SpyActivity() {
        this(DSL.name("spy_activity"), null);
    }

    public <O extends Record> SpyActivity(Table<O> child, ForeignKey<O, SpyActivityRecord> key) {
        super(child, key, SPY_ACTIVITY);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public UniqueKey<SpyActivityRecord> getPrimaryKey() {
        return Keys.SPY_ACTIVITY__PK_SPY_ACTIVITY;
    }

    @Override
    public SpyActivity as(String alias) {
        return new SpyActivity(DSL.name(alias), this);
    }

    @Override
    public SpyActivity as(Name alias) {
        return new SpyActivity(alias, this);
    }

    @Override
    public SpyActivity as(Table<?> alias) {
        return new SpyActivity(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public SpyActivity rename(String name) {
        return new SpyActivity(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public SpyActivity rename(Name name) {
        return new SpyActivity(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public SpyActivity rename(Table<?> name) {
        return new SpyActivity(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Integer, Long, Long, Long, Integer> fieldsRow() {
        return (Row5) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function5<? super Integer, ? super Long, ? super Long, ? super Long, ? super Integer, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function5<? super Integer, ? super Long, ? super Long, ? super Long, ? super Integer, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
