/*
 * This file is generated by jOOQ.
 */
package org.example.jooq.nations.tables;


import java.util.function.Function;

import org.example.jooq.nations.DefaultSchema;
import org.example.jooq.nations.Keys;
import org.example.jooq.nations.tables.records.RadiationByTurnRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function3;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class RadiationByTurn extends TableImpl<RadiationByTurnRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>RADIATION_BY_TURN</code>
     */
    public static final RadiationByTurn RADIATION_BY_TURN = new RadiationByTurn();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<RadiationByTurnRecord> getRecordType() {
        return RadiationByTurnRecord.class;
    }

    /**
     * The column <code>RADIATION_BY_TURN.continent</code>.
     */
    public final TableField<RadiationByTurnRecord, Integer> CONTINENT = createField(DSL.name("continent"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>RADIATION_BY_TURN.radiation</code>.
     */
    public final TableField<RadiationByTurnRecord, Integer> RADIATION = createField(DSL.name("radiation"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>RADIATION_BY_TURN.turn</code>.
     */
    public final TableField<RadiationByTurnRecord, Long> TURN = createField(DSL.name("turn"), SQLDataType.BIGINT.nullable(false), this, "");

    private RadiationByTurn(Name alias, Table<RadiationByTurnRecord> aliased) {
        this(alias, aliased, null);
    }

    private RadiationByTurn(Name alias, Table<RadiationByTurnRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>RADIATION_BY_TURN</code> table reference
     */
    public RadiationByTurn(String alias) {
        this(DSL.name(alias), RADIATION_BY_TURN);
    }

    /**
     * Create an aliased <code>RADIATION_BY_TURN</code> table reference
     */
    public RadiationByTurn(Name alias) {
        this(alias, RADIATION_BY_TURN);
    }

    /**
     * Create a <code>RADIATION_BY_TURN</code> table reference
     */
    public RadiationByTurn() {
        this(DSL.name("RADIATION_BY_TURN"), null);
    }

    public <O extends Record> RadiationByTurn(Table<O> child, ForeignKey<O, RadiationByTurnRecord> key) {
        super(child, key, RADIATION_BY_TURN);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public UniqueKey<RadiationByTurnRecord> getPrimaryKey() {
        return Keys.RADIATION_BY_TURN__PK_RADIATION_BY_TURN;
    }

    @Override
    public RadiationByTurn as(String alias) {
        return new RadiationByTurn(DSL.name(alias), this);
    }

    @Override
    public RadiationByTurn as(Name alias) {
        return new RadiationByTurn(alias, this);
    }

    @Override
    public RadiationByTurn as(Table<?> alias) {
        return new RadiationByTurn(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public RadiationByTurn rename(String name) {
        return new RadiationByTurn(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public RadiationByTurn rename(Name name) {
        return new RadiationByTurn(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public RadiationByTurn rename(Table<?> name) {
        return new RadiationByTurn(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Integer, Integer, Long> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function3<? super Integer, ? super Integer, ? super Long, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function3<? super Integer, ? super Integer, ? super Long, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
