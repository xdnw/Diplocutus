/*
 * This file is generated by jOOQ.
 */
package org.example.jooq.nations.tables;


import java.util.function.Function;

import org.example.jooq.nations.DefaultSchema;
import org.example.jooq.nations.Keys;
import org.example.jooq.nations.tables.records.BeigeRemindersRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function3;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class BeigeReminders extends TableImpl<BeigeRemindersRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>BEIGE_REMINDERS</code>
     */
    public static final BeigeReminders BEIGE_REMINDERS = new BeigeReminders();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<BeigeRemindersRecord> getRecordType() {
        return BeigeRemindersRecord.class;
    }

    /**
     * The column <code>BEIGE_REMINDERS.target</code>.
     */
    public final TableField<BeigeRemindersRecord, Integer> TARGET = createField(DSL.name("target"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>BEIGE_REMINDERS.attacker</code>.
     */
    public final TableField<BeigeRemindersRecord, Integer> ATTACKER = createField(DSL.name("attacker"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>BEIGE_REMINDERS.turn</code>.
     */
    public final TableField<BeigeRemindersRecord, Long> TURN = createField(DSL.name("turn"), SQLDataType.BIGINT.nullable(false), this, "");

    private BeigeReminders(Name alias, Table<BeigeRemindersRecord> aliased) {
        this(alias, aliased, null);
    }

    private BeigeReminders(Name alias, Table<BeigeRemindersRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>BEIGE_REMINDERS</code> table reference
     */
    public BeigeReminders(String alias) {
        this(DSL.name(alias), BEIGE_REMINDERS);
    }

    /**
     * Create an aliased <code>BEIGE_REMINDERS</code> table reference
     */
    public BeigeReminders(Name alias) {
        this(alias, BEIGE_REMINDERS);
    }

    /**
     * Create a <code>BEIGE_REMINDERS</code> table reference
     */
    public BeigeReminders() {
        this(DSL.name("BEIGE_REMINDERS"), null);
    }

    public <O extends Record> BeigeReminders(Table<O> child, ForeignKey<O, BeigeRemindersRecord> key) {
        super(child, key, BEIGE_REMINDERS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public UniqueKey<BeigeRemindersRecord> getPrimaryKey() {
        return Keys.BEIGE_REMINDERS__PK_BEIGE_REMINDERS;
    }

    @Override
    public BeigeReminders as(String alias) {
        return new BeigeReminders(DSL.name(alias), this);
    }

    @Override
    public BeigeReminders as(Name alias) {
        return new BeigeReminders(alias, this);
    }

    @Override
    public BeigeReminders as(Table<?> alias) {
        return new BeigeReminders(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public BeigeReminders rename(String name) {
        return new BeigeReminders(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public BeigeReminders rename(Name name) {
        return new BeigeReminders(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public BeigeReminders rename(Table<?> name) {
        return new BeigeReminders(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Integer, Integer, Long> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function3<? super Integer, ? super Integer, ? super Long, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function3<? super Integer, ? super Integer, ? super Long, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
