/*
 * This file is generated by jOOQ.
 */
package org.example.jooq.nations.tables;


import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.example.jooq.nations.DefaultSchema;
import org.example.jooq.nations.Indexes;
import org.example.jooq.nations.Keys;
import org.example.jooq.nations.tables.records.NationMilHistoryRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function4;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class NationMilHistory extends TableImpl<NationMilHistoryRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>NATION_MIL_HISTORY</code>
     */
    public static final NationMilHistory NATION_MIL_HISTORY = new NationMilHistory();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<NationMilHistoryRecord> getRecordType() {
        return NationMilHistoryRecord.class;
    }

    /**
     * The column <code>NATION_MIL_HISTORY.id</code>.
     */
    public final TableField<NationMilHistoryRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>NATION_MIL_HISTORY.date</code>.
     */
    public final TableField<NationMilHistoryRecord, Long> DATE = createField(DSL.name("date"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>NATION_MIL_HISTORY.unit</code>.
     */
    public final TableField<NationMilHistoryRecord, Integer> UNIT = createField(DSL.name("unit"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>NATION_MIL_HISTORY.amount</code>.
     */
    public final TableField<NationMilHistoryRecord, Integer> AMOUNT = createField(DSL.name("amount"), SQLDataType.INTEGER.nullable(false), this, "");

    private NationMilHistory(Name alias, Table<NationMilHistoryRecord> aliased) {
        this(alias, aliased, null);
    }

    private NationMilHistory(Name alias, Table<NationMilHistoryRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>NATION_MIL_HISTORY</code> table reference
     */
    public NationMilHistory(String alias) {
        this(DSL.name(alias), NATION_MIL_HISTORY);
    }

    /**
     * Create an aliased <code>NATION_MIL_HISTORY</code> table reference
     */
    public NationMilHistory(Name alias) {
        this(alias, NATION_MIL_HISTORY);
    }

    /**
     * Create a <code>NATION_MIL_HISTORY</code> table reference
     */
    public NationMilHistory() {
        this(DSL.name("NATION_MIL_HISTORY"), null);
    }

    public <O extends Record> NationMilHistory(Table<O> child, ForeignKey<O, NationMilHistoryRecord> key) {
        super(child, key, NATION_MIL_HISTORY);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.INDEX_MIL_AMOUNT, Indexes.INDEX_MIL_DATE, Indexes.INDEX_MIL_UNIT);
    }

    @Override
    public UniqueKey<NationMilHistoryRecord> getPrimaryKey() {
        return Keys.NATION_MIL_HISTORY__PK_NATION_MIL_HISTORY;
    }

    @Override
    public NationMilHistory as(String alias) {
        return new NationMilHistory(DSL.name(alias), this);
    }

    @Override
    public NationMilHistory as(Name alias) {
        return new NationMilHistory(alias, this);
    }

    @Override
    public NationMilHistory as(Table<?> alias) {
        return new NationMilHistory(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public NationMilHistory rename(String name) {
        return new NationMilHistory(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public NationMilHistory rename(Name name) {
        return new NationMilHistory(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public NationMilHistory rename(Table<?> name) {
        return new NationMilHistory(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Integer, Long, Integer, Integer> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function4<? super Integer, ? super Long, ? super Integer, ? super Integer, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function4<? super Integer, ? super Long, ? super Integer, ? super Integer, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
