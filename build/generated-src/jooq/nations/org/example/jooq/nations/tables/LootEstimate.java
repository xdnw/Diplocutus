/*
 * This file is generated by jOOQ.
 */
package org.example.jooq.nations.tables;


import java.util.function.Function;

import org.example.jooq.nations.DefaultSchema;
import org.example.jooq.nations.Keys;
import org.example.jooq.nations.tables.records.LootEstimateRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function7;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class LootEstimate extends TableImpl<LootEstimateRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>LOOT_ESTIMATE</code>
     */
    public static final LootEstimate LOOT_ESTIMATE = new LootEstimate();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<LootEstimateRecord> getRecordType() {
        return LootEstimateRecord.class;
    }

    /**
     * The column <code>LOOT_ESTIMATE.nation_id</code>.
     */
    public final TableField<LootEstimateRecord, Integer> NATION_ID = createField(DSL.name("nation_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>LOOT_ESTIMATE.last_turn_revenue</code>.
     */
    public final TableField<LootEstimateRecord, Long> LAST_TURN_REVENUE = createField(DSL.name("last_turn_revenue"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>LOOT_ESTIMATE.last_resolved</code>.
     */
    public final TableField<LootEstimateRecord, Long> LAST_RESOLVED = createField(DSL.name("last_resolved"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>LOOT_ESTIMATE.tax_id</code>.
     */
    public final TableField<LootEstimateRecord, byte[]> TAX_ID = createField(DSL.name("tax_id"), SQLDataType.BINARY.nullable(false), this, "");

    /**
     * The column <code>LOOT_ESTIMATE.min</code>.
     */
    public final TableField<LootEstimateRecord, byte[]> MIN = createField(DSL.name("min"), SQLDataType.BINARY.nullable(false), this, "");

    /**
     * The column <code>LOOT_ESTIMATE.max</code>.
     */
    public final TableField<LootEstimateRecord, byte[]> MAX = createField(DSL.name("max"), SQLDataType.BINARY.nullable(false), this, "");

    /**
     * The column <code>LOOT_ESTIMATE.offset</code>.
     */
    public final TableField<LootEstimateRecord, byte[]> OFFSET = createField(DSL.name("offset"), SQLDataType.BINARY.nullable(false), this, "");

    private LootEstimate(Name alias, Table<LootEstimateRecord> aliased) {
        this(alias, aliased, null);
    }

    private LootEstimate(Name alias, Table<LootEstimateRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>LOOT_ESTIMATE</code> table reference
     */
    public LootEstimate(String alias) {
        this(DSL.name(alias), LOOT_ESTIMATE);
    }

    /**
     * Create an aliased <code>LOOT_ESTIMATE</code> table reference
     */
    public LootEstimate(Name alias) {
        this(alias, LOOT_ESTIMATE);
    }

    /**
     * Create a <code>LOOT_ESTIMATE</code> table reference
     */
    public LootEstimate() {
        this(DSL.name("LOOT_ESTIMATE"), null);
    }

    public <O extends Record> LootEstimate(Table<O> child, ForeignKey<O, LootEstimateRecord> key) {
        super(child, key, LOOT_ESTIMATE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public UniqueKey<LootEstimateRecord> getPrimaryKey() {
        return Keys.LOOT_ESTIMATE__PK_LOOT_ESTIMATE;
    }

    @Override
    public LootEstimate as(String alias) {
        return new LootEstimate(DSL.name(alias), this);
    }

    @Override
    public LootEstimate as(Name alias) {
        return new LootEstimate(alias, this);
    }

    @Override
    public LootEstimate as(Table<?> alias) {
        return new LootEstimate(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public LootEstimate rename(String name) {
        return new LootEstimate(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public LootEstimate rename(Name name) {
        return new LootEstimate(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public LootEstimate rename(Table<?> name) {
        return new LootEstimate(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<Integer, Long, Long, byte[], byte[], byte[], byte[]> fieldsRow() {
        return (Row7) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function7<? super Integer, ? super Long, ? super Long, ? super byte[], ? super byte[], ? super byte[], ? super byte[], ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function7<? super Integer, ? super Long, ? super Long, ? super byte[], ? super byte[], ? super byte[], ? super byte[], ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
