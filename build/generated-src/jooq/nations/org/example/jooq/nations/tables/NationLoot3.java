/*
 * This file is generated by jOOQ.
 */
package org.example.jooq.nations.tables;


import java.util.function.Function;

import org.example.jooq.nations.DefaultSchema;
import org.example.jooq.nations.Keys;
import org.example.jooq.nations.tables.records.NationLoot3Record;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function4;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class NationLoot3 extends TableImpl<NationLoot3Record> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>NATION_LOOT3</code>
     */
    public static final NationLoot3 NATION_LOOT3 = new NationLoot3();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<NationLoot3Record> getRecordType() {
        return NationLoot3Record.class;
    }

    /**
     * The column <code>NATION_LOOT3.id</code>.
     */
    public final TableField<NationLoot3Record, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>NATION_LOOT3.total_rss</code>.
     */
    public final TableField<NationLoot3Record, byte[]> TOTAL_RSS = createField(DSL.name("total_rss"), SQLDataType.BINARY.nullable(false), this, "");

    /**
     * The column <code>NATION_LOOT3.date</code>.
     */
    public final TableField<NationLoot3Record, Long> DATE = createField(DSL.name("date"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>NATION_LOOT3.type</code>.
     */
    public final TableField<NationLoot3Record, Integer> TYPE = createField(DSL.name("type"), SQLDataType.INTEGER.nullable(false), this, "");

    private NationLoot3(Name alias, Table<NationLoot3Record> aliased) {
        this(alias, aliased, null);
    }

    private NationLoot3(Name alias, Table<NationLoot3Record> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>NATION_LOOT3</code> table reference
     */
    public NationLoot3(String alias) {
        this(DSL.name(alias), NATION_LOOT3);
    }

    /**
     * Create an aliased <code>NATION_LOOT3</code> table reference
     */
    public NationLoot3(Name alias) {
        this(alias, NATION_LOOT3);
    }

    /**
     * Create a <code>NATION_LOOT3</code> table reference
     */
    public NationLoot3() {
        this(DSL.name("NATION_LOOT3"), null);
    }

    public <O extends Record> NationLoot3(Table<O> child, ForeignKey<O, NationLoot3Record> key) {
        super(child, key, NATION_LOOT3);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public UniqueKey<NationLoot3Record> getPrimaryKey() {
        return Keys.NATION_LOOT3__PK_NATION_LOOT3;
    }

    @Override
    public NationLoot3 as(String alias) {
        return new NationLoot3(DSL.name(alias), this);
    }

    @Override
    public NationLoot3 as(Name alias) {
        return new NationLoot3(alias, this);
    }

    @Override
    public NationLoot3 as(Table<?> alias) {
        return new NationLoot3(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public NationLoot3 rename(String name) {
        return new NationLoot3(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public NationLoot3 rename(Name name) {
        return new NationLoot3(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public NationLoot3 rename(Table<?> name) {
        return new NationLoot3(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Integer, byte[], Long, Integer> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function4<? super Integer, ? super byte[], ? super Long, ? super Integer, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function4<? super Integer, ? super byte[], ? super Long, ? super Integer, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
