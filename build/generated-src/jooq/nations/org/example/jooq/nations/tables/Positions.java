/*
 * This file is generated by jOOQ.
 */
package org.example.jooq.nations.tables;


import java.util.function.Function;

import org.example.jooq.nations.DefaultSchema;
import org.example.jooq.nations.Keys;
import org.example.jooq.nations.tables.records.PositionsRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function7;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Positions extends TableImpl<PositionsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>POSITIONS</code>
     */
    public static final Positions POSITIONS = new Positions();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PositionsRecord> getRecordType() {
        return PositionsRecord.class;
    }

    /**
     * The column <code>POSITIONS.id</code>.
     */
    public final TableField<PositionsRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>POSITIONS.alliance_id</code>.
     */
    public final TableField<PositionsRecord, Integer> ALLIANCE_ID = createField(DSL.name("alliance_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>POSITIONS.name</code>.
     */
    public final TableField<PositionsRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(32).nullable(false), this, "");

    /**
     * The column <code>POSITIONS.date_created</code>.
     */
    public final TableField<PositionsRecord, Long> DATE_CREATED = createField(DSL.name("date_created"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>POSITIONS.position_level</code>.
     */
    public final TableField<PositionsRecord, Integer> POSITION_LEVEL = createField(DSL.name("position_level"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>POSITIONS.rank</code>.
     */
    public final TableField<PositionsRecord, Integer> RANK = createField(DSL.name("rank"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>POSITIONS.permission_bits</code>.
     */
    public final TableField<PositionsRecord, Long> PERMISSION_BITS = createField(DSL.name("permission_bits"), SQLDataType.BIGINT.nullable(false), this, "");

    private Positions(Name alias, Table<PositionsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Positions(Name alias, Table<PositionsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>POSITIONS</code> table reference
     */
    public Positions(String alias) {
        this(DSL.name(alias), POSITIONS);
    }

    /**
     * Create an aliased <code>POSITIONS</code> table reference
     */
    public Positions(Name alias) {
        this(alias, POSITIONS);
    }

    /**
     * Create a <code>POSITIONS</code> table reference
     */
    public Positions() {
        this(DSL.name("POSITIONS"), null);
    }

    public <O extends Record> Positions(Table<O> child, ForeignKey<O, PositionsRecord> key) {
        super(child, key, POSITIONS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public UniqueKey<PositionsRecord> getPrimaryKey() {
        return Keys.POSITIONS__PK_POSITIONS;
    }

    @Override
    public Positions as(String alias) {
        return new Positions(DSL.name(alias), this);
    }

    @Override
    public Positions as(Name alias) {
        return new Positions(alias, this);
    }

    @Override
    public Positions as(Table<?> alias) {
        return new Positions(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Positions rename(String name) {
        return new Positions(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Positions rename(Name name) {
        return new Positions(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Positions rename(Table<?> name) {
        return new Positions(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<Integer, Integer, String, Long, Integer, Integer, Long> fieldsRow() {
        return (Row7) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function7<? super Integer, ? super Integer, ? super String, ? super Long, ? super Integer, ? super Integer, ? super Long, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function7<? super Integer, ? super Integer, ? super String, ? super Long, ? super Integer, ? super Integer, ? super Long, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
