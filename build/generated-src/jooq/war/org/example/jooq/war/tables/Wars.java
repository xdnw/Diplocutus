/*
 * This file is generated by jOOQ.
 */
package org.example.jooq.war.tables;


import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.example.jooq.war.DefaultSchema;
import org.example.jooq.war.Indexes;
import org.example.jooq.war.Keys;
import org.example.jooq.war.tables.records.WarsRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function8;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row8;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Wars extends TableImpl<WarsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>WARS</code>
     */
    public static final Wars WARS = new Wars();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<WarsRecord> getRecordType() {
        return WarsRecord.class;
    }

    /**
     * The column <code>WARS.id</code>.
     */
    public final TableField<WarsRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>WARS.attacker_id</code>.
     */
    public final TableField<WarsRecord, Integer> ATTACKER_ID = createField(DSL.name("attacker_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>WARS.defender_id</code>.
     */
    public final TableField<WarsRecord, Integer> DEFENDER_ID = createField(DSL.name("defender_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>WARS.attacker_aa</code>.
     */
    public final TableField<WarsRecord, Integer> ATTACKER_AA = createField(DSL.name("attacker_aa"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>WARS.defender_aa</code>.
     */
    public final TableField<WarsRecord, Integer> DEFENDER_AA = createField(DSL.name("defender_aa"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>WARS.war_type</code>.
     */
    public final TableField<WarsRecord, Integer> WAR_TYPE = createField(DSL.name("war_type"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>WARS.status</code>.
     */
    public final TableField<WarsRecord, Integer> STATUS = createField(DSL.name("status"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>WARS.date</code>.
     */
    public final TableField<WarsRecord, Long> DATE = createField(DSL.name("date"), SQLDataType.BIGINT.nullable(false), this, "");

    private Wars(Name alias, Table<WarsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Wars(Name alias, Table<WarsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>WARS</code> table reference
     */
    public Wars(String alias) {
        this(DSL.name(alias), WARS);
    }

    /**
     * Create an aliased <code>WARS</code> table reference
     */
    public Wars(Name alias) {
        this(alias, WARS);
    }

    /**
     * Create a <code>WARS</code> table reference
     */
    public Wars() {
        this(DSL.name("WARS"), null);
    }

    public <O extends Record> Wars(Table<O> child, ForeignKey<O, WarsRecord> key) {
        super(child, key, WARS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.INDEX_WARS_ATTACKER, Indexes.INDEX_WARS_DATE, Indexes.INDEX_WARS_DEFENDER, Indexes.INDEX_WARS_STATUS);
    }

    @Override
    public UniqueKey<WarsRecord> getPrimaryKey() {
        return Keys.WARS__PK_WARS;
    }

    @Override
    public Wars as(String alias) {
        return new Wars(DSL.name(alias), this);
    }

    @Override
    public Wars as(Name alias) {
        return new Wars(alias, this);
    }

    @Override
    public Wars as(Table<?> alias) {
        return new Wars(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Wars rename(String name) {
        return new Wars(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Wars rename(Name name) {
        return new Wars(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Wars rename(Table<?> name) {
        return new Wars(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row8<Integer, Integer, Integer, Integer, Integer, Integer, Integer, Long> fieldsRow() {
        return (Row8) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function8<? super Integer, ? super Integer, ? super Integer, ? super Integer, ? super Integer, ? super Integer, ? super Integer, ? super Long, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function8<? super Integer, ? super Integer, ? super Integer, ? super Integer, ? super Integer, ? super Integer, ? super Integer, ? super Long, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
