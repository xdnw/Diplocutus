/*
 * This file is generated by jOOQ.
 */
package org.example.jooq.war.tables;


import java.util.Arrays;
import java.util.List;

import org.example.jooq.war.DefaultSchema;
import org.example.jooq.war.Indexes;
import org.example.jooq.war.Keys;
import org.example.jooq.war.tables.records.Attacks2Record;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Attacks2 extends TableImpl<Attacks2Record> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>attacks2</code>
     */
    public static final Attacks2 ATTACKS2 = new Attacks2();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<Attacks2Record> getRecordType() {
        return Attacks2Record.class;
    }

    /**
     * The column <code>attacks2.war_attack_id</code>.
     */
    public final TableField<Attacks2Record, Integer> WAR_ATTACK_ID = createField(DSL.name("war_attack_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>attacks2.date</code>.
     */
    public final TableField<Attacks2Record, Long> DATE = createField(DSL.name("date"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>attacks2.war_id</code>.
     */
    public final TableField<Attacks2Record, Integer> WAR_ID = createField(DSL.name("war_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>attacks2.attacker_nation_id</code>.
     */
    public final TableField<Attacks2Record, Integer> ATTACKER_NATION_ID = createField(DSL.name("attacker_nation_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>attacks2.defender_nation_id</code>.
     */
    public final TableField<Attacks2Record, Integer> DEFENDER_NATION_ID = createField(DSL.name("defender_nation_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>attacks2.attack_type</code>.
     */
    public final TableField<Attacks2Record, Integer> ATTACK_TYPE = createField(DSL.name("attack_type"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>attacks2.victor</code>.
     */
    public final TableField<Attacks2Record, Integer> VICTOR = createField(DSL.name("victor"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>attacks2.success</code>.
     */
    public final TableField<Attacks2Record, Integer> SUCCESS = createField(DSL.name("success"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>attacks2.attcas1</code>.
     */
    public final TableField<Attacks2Record, Integer> ATTCAS1 = createField(DSL.name("attcas1"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>attacks2.attcas2</code>.
     */
    public final TableField<Attacks2Record, Integer> ATTCAS2 = createField(DSL.name("attcas2"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>attacks2.defcas1</code>.
     */
    public final TableField<Attacks2Record, Integer> DEFCAS1 = createField(DSL.name("defcas1"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>attacks2.defcas2</code>.
     */
    public final TableField<Attacks2Record, Integer> DEFCAS2 = createField(DSL.name("defcas2"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>attacks2.defcas3</code>.
     */
    public final TableField<Attacks2Record, Integer> DEFCAS3 = createField(DSL.name("defcas3"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>attacks2.city_id</code>.
     */
    public final TableField<Attacks2Record, Integer> CITY_ID = createField(DSL.name("city_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>attacks2.infra_destroyed</code>.
     */
    public final TableField<Attacks2Record, Integer> INFRA_DESTROYED = createField(DSL.name("infra_destroyed"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>attacks2.improvements_destroyed</code>.
     */
    public final TableField<Attacks2Record, Integer> IMPROVEMENTS_DESTROYED = createField(DSL.name("improvements_destroyed"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>attacks2.money_looted</code>.
     */
    public final TableField<Attacks2Record, Long> MONEY_LOOTED = createField(DSL.name("money_looted"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>attacks2.looted</code>.
     */
    public final TableField<Attacks2Record, Integer> LOOTED = createField(DSL.name("looted"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>attacks2.loot</code>.
     */
    public final TableField<Attacks2Record, byte[]> LOOT = createField(DSL.name("loot"), SQLDataType.BLOB, this, "");

    /**
     * The column <code>attacks2.pct_looted</code>.
     */
    public final TableField<Attacks2Record, Integer> PCT_LOOTED = createField(DSL.name("pct_looted"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>attacks2.city_infra_before</code>.
     */
    public final TableField<Attacks2Record, Integer> CITY_INFRA_BEFORE = createField(DSL.name("city_infra_before"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>attacks2.infra_destroyed_value</code>.
     */
    public final TableField<Attacks2Record, Integer> INFRA_DESTROYED_VALUE = createField(DSL.name("infra_destroyed_value"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>attacks2.att_gas_used</code>.
     */
    public final TableField<Attacks2Record, Integer> ATT_GAS_USED = createField(DSL.name("att_gas_used"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>attacks2.att_mun_used</code>.
     */
    public final TableField<Attacks2Record, Integer> ATT_MUN_USED = createField(DSL.name("att_mun_used"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>attacks2.def_gas_used</code>.
     */
    public final TableField<Attacks2Record, Integer> DEF_GAS_USED = createField(DSL.name("def_gas_used"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>attacks2.def_mun_used</code>.
     */
    public final TableField<Attacks2Record, Integer> DEF_MUN_USED = createField(DSL.name("def_mun_used"), SQLDataType.INTEGER, this, "");

    private Attacks2(Name alias, Table<Attacks2Record> aliased) {
        this(alias, aliased, null);
    }

    private Attacks2(Name alias, Table<Attacks2Record> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>attacks2</code> table reference
     */
    public Attacks2(String alias) {
        this(DSL.name(alias), ATTACKS2);
    }

    /**
     * Create an aliased <code>attacks2</code> table reference
     */
    public Attacks2(Name alias) {
        this(alias, ATTACKS2);
    }

    /**
     * Create a <code>attacks2</code> table reference
     */
    public Attacks2() {
        this(DSL.name("attacks2"), null);
    }

    public <O extends Record> Attacks2(Table<O> child, ForeignKey<O, Attacks2Record> key) {
        super(child, key, ATTACKS2);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.INDEX_ATTACK_ATTACKER_NATION_ID, Indexes.INDEX_ATTACK_DATE, Indexes.INDEX_ATTACK_DEFENDER_NATION_ID, Indexes.INDEX_ATTACK_WARID);
    }

    @Override
    public UniqueKey<Attacks2Record> getPrimaryKey() {
        return Keys.ATTACKS2__PK_ATTACKS2;
    }

    @Override
    public Attacks2 as(String alias) {
        return new Attacks2(DSL.name(alias), this);
    }

    @Override
    public Attacks2 as(Name alias) {
        return new Attacks2(alias, this);
    }

    @Override
    public Attacks2 as(Table<?> alias) {
        return new Attacks2(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Attacks2 rename(String name) {
        return new Attacks2(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Attacks2 rename(Name name) {
        return new Attacks2(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Attacks2 rename(Table<?> name) {
        return new Attacks2(name.getQualifiedName(), null);
    }
}
