/*
 * This file is generated by jOOQ.
 */
package org.example.jooq.war.tables;


import java.util.function.Function;

import org.example.jooq.war.DefaultSchema;
import org.example.jooq.war.Keys;
import org.example.jooq.war.tables.records.BlockadedRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function2;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Blockaded extends TableImpl<BlockadedRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>BLOCKADED</code>
     */
    public static final Blockaded BLOCKADED = new Blockaded();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<BlockadedRecord> getRecordType() {
        return BlockadedRecord.class;
    }

    /**
     * @deprecated Unknown data type. If this is a qualified, user-defined type,
     * it may have been excluded from code generation. If this is a built-in
     * type, you can define an explicit {@link org.jooq.Binding} to specify how
     * this type should be handled. Deprecation can be turned off using
     * {@literal <deprecationOnUnknownTypes/>} in your code generator
     * configuration.
     */
    @Deprecated
    public final TableField<BlockadedRecord, Object> BLOCKADER = createField(DSL.name("blockader"), SQLDataType.OTHER, this, "");

    /**
     * @deprecated Unknown data type. If this is a qualified, user-defined type,
     * it may have been excluded from code generation. If this is a built-in
     * type, you can define an explicit {@link org.jooq.Binding} to specify how
     * this type should be handled. Deprecation can be turned off using
     * {@literal <deprecationOnUnknownTypes/>} in your code generator
     * configuration.
     */
    @Deprecated
    public final TableField<BlockadedRecord, Object> BLOCKADED_ = createField(DSL.name("blockaded"), SQLDataType.OTHER, this, "");

    private Blockaded(Name alias, Table<BlockadedRecord> aliased) {
        this(alias, aliased, null);
    }

    private Blockaded(Name alias, Table<BlockadedRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>BLOCKADED</code> table reference
     */
    public Blockaded(String alias) {
        this(DSL.name(alias), BLOCKADED);
    }

    /**
     * Create an aliased <code>BLOCKADED</code> table reference
     */
    public Blockaded(Name alias) {
        this(alias, BLOCKADED);
    }

    /**
     * Create a <code>BLOCKADED</code> table reference
     */
    public Blockaded() {
        this(DSL.name("BLOCKADED"), null);
    }

    public <O extends Record> Blockaded(Table<O> child, ForeignKey<O, BlockadedRecord> key) {
        super(child, key, BLOCKADED);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public UniqueKey<BlockadedRecord> getPrimaryKey() {
        return Keys.BLOCKADED__PK_BLOCKADED;
    }

    @Override
    public Blockaded as(String alias) {
        return new Blockaded(DSL.name(alias), this);
    }

    @Override
    public Blockaded as(Name alias) {
        return new Blockaded(alias, this);
    }

    @Override
    public Blockaded as(Table<?> alias) {
        return new Blockaded(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Blockaded rename(String name) {
        return new Blockaded(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Blockaded rename(Name name) {
        return new Blockaded(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Blockaded rename(Table<?> name) {
        return new Blockaded(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<Object, Object> fieldsRow() {
        return (Row2) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function2<? super Object, ? super Object, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function2<? super Object, ? super Object, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
