/*
 * This file is generated by jOOQ.
 */
package org.example.jooq.war.tables;


import java.util.function.Function;

import org.example.jooq.war.DefaultSchema;
import org.example.jooq.war.Keys;
import org.example.jooq.war.tables.records.AttackSubcategoryCacheRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function3;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AttackSubcategoryCache extends TableImpl<AttackSubcategoryCacheRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>ATTACK_SUBCATEGORY_CACHE</code>
     */
    public static final AttackSubcategoryCache ATTACK_SUBCATEGORY_CACHE = new AttackSubcategoryCache();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AttackSubcategoryCacheRecord> getRecordType() {
        return AttackSubcategoryCacheRecord.class;
    }

    /**
     * The column <code>ATTACK_SUBCATEGORY_CACHE.attack_id</code>.
     */
    public final TableField<AttackSubcategoryCacheRecord, Integer> ATTACK_ID = createField(DSL.name("attack_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>ATTACK_SUBCATEGORY_CACHE.subcategory_id</code>.
     */
    public final TableField<AttackSubcategoryCacheRecord, Integer> SUBCATEGORY_ID = createField(DSL.name("subcategory_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>ATTACK_SUBCATEGORY_CACHE.war_id</code>.
     */
    public final TableField<AttackSubcategoryCacheRecord, Integer> WAR_ID = createField(DSL.name("war_id"), SQLDataType.INTEGER.nullable(false), this, "");

    private AttackSubcategoryCache(Name alias, Table<AttackSubcategoryCacheRecord> aliased) {
        this(alias, aliased, null);
    }

    private AttackSubcategoryCache(Name alias, Table<AttackSubcategoryCacheRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>ATTACK_SUBCATEGORY_CACHE</code> table reference
     */
    public AttackSubcategoryCache(String alias) {
        this(DSL.name(alias), ATTACK_SUBCATEGORY_CACHE);
    }

    /**
     * Create an aliased <code>ATTACK_SUBCATEGORY_CACHE</code> table reference
     */
    public AttackSubcategoryCache(Name alias) {
        this(alias, ATTACK_SUBCATEGORY_CACHE);
    }

    /**
     * Create a <code>ATTACK_SUBCATEGORY_CACHE</code> table reference
     */
    public AttackSubcategoryCache() {
        this(DSL.name("ATTACK_SUBCATEGORY_CACHE"), null);
    }

    public <O extends Record> AttackSubcategoryCache(Table<O> child, ForeignKey<O, AttackSubcategoryCacheRecord> key) {
        super(child, key, ATTACK_SUBCATEGORY_CACHE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public UniqueKey<AttackSubcategoryCacheRecord> getPrimaryKey() {
        return Keys.ATTACK_SUBCATEGORY_CACHE__PK_ATTACK_SUBCATEGORY_CACHE;
    }

    @Override
    public AttackSubcategoryCache as(String alias) {
        return new AttackSubcategoryCache(DSL.name(alias), this);
    }

    @Override
    public AttackSubcategoryCache as(Name alias) {
        return new AttackSubcategoryCache(alias, this);
    }

    @Override
    public AttackSubcategoryCache as(Table<?> alias) {
        return new AttackSubcategoryCache(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public AttackSubcategoryCache rename(String name) {
        return new AttackSubcategoryCache(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public AttackSubcategoryCache rename(Name name) {
        return new AttackSubcategoryCache(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public AttackSubcategoryCache rename(Table<?> name) {
        return new AttackSubcategoryCache(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Integer, Integer, Integer> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function3<? super Integer, ? super Integer, ? super Integer, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function3<? super Integer, ? super Integer, ? super Integer, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
