/*
 * This file is generated by jOOQ.
 */
package org.example.jooq.bank.tables;


import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.example.jooq.bank.DefaultSchema;
import org.example.jooq.bank.Indexes;
import org.example.jooq.bank.Keys;
import org.example.jooq.bank.tables.records.TaxDepositsDateRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function9;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row9;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TaxDepositsDate extends TableImpl<TaxDepositsDateRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>TAX_DEPOSITS_DATE</code>
     */
    public static final TaxDepositsDate TAX_DEPOSITS_DATE = new TaxDepositsDate();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TaxDepositsDateRecord> getRecordType() {
        return TaxDepositsDateRecord.class;
    }

    /**
     * The column <code>TAX_DEPOSITS_DATE.tax_id</code>.
     */
    public final TableField<TaxDepositsDateRecord, Integer> TAX_ID = createField(DSL.name("tax_id"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field("-1", SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>TAX_DEPOSITS_DATE.alliance</code>.
     */
    public final TableField<TaxDepositsDateRecord, Integer> ALLIANCE = createField(DSL.name("alliance"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>TAX_DEPOSITS_DATE.date</code>.
     */
    public final TableField<TaxDepositsDateRecord, Long> DATE = createField(DSL.name("date"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>TAX_DEPOSITS_DATE.id</code>.
     */
    public final TableField<TaxDepositsDateRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>TAX_DEPOSITS_DATE.nation</code>.
     */
    public final TableField<TaxDepositsDateRecord, Integer> NATION = createField(DSL.name("nation"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>TAX_DEPOSITS_DATE.moneyrate</code>.
     */
    public final TableField<TaxDepositsDateRecord, Integer> MONEYRATE = createField(DSL.name("moneyrate"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>TAX_DEPOSITS_DATE.resoucerate</code>.
     */
    public final TableField<TaxDepositsDateRecord, Integer> RESOUCERATE = createField(DSL.name("resoucerate"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>TAX_DEPOSITS_DATE.resources</code>.
     */
    public final TableField<TaxDepositsDateRecord, byte[]> RESOURCES = createField(DSL.name("resources"), SQLDataType.BLOB.nullable(false), this, "");

    /**
     * The column <code>TAX_DEPOSITS_DATE.internal_taxrate</code>.
     */
    public final TableField<TaxDepositsDateRecord, Integer> INTERNAL_TAXRATE = createField(DSL.name("internal_taxrate"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field("-1", SQLDataType.INTEGER)), this, "");

    private TaxDepositsDate(Name alias, Table<TaxDepositsDateRecord> aliased) {
        this(alias, aliased, null);
    }

    private TaxDepositsDate(Name alias, Table<TaxDepositsDateRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>TAX_DEPOSITS_DATE</code> table reference
     */
    public TaxDepositsDate(String alias) {
        this(DSL.name(alias), TAX_DEPOSITS_DATE);
    }

    /**
     * Create an aliased <code>TAX_DEPOSITS_DATE</code> table reference
     */
    public TaxDepositsDate(Name alias) {
        this(alias, TAX_DEPOSITS_DATE);
    }

    /**
     * Create a <code>TAX_DEPOSITS_DATE</code> table reference
     */
    public TaxDepositsDate() {
        this(DSL.name("TAX_DEPOSITS_DATE"), null);
    }

    public <O extends Record> TaxDepositsDate(Table<O> child, ForeignKey<O, TaxDepositsDateRecord> key) {
        super(child, key, TAX_DEPOSITS_DATE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.INDEX_TAX_DEPOSITS_NATION);
    }

    @Override
    public UniqueKey<TaxDepositsDateRecord> getPrimaryKey() {
        return Keys.TAX_DEPOSITS_DATE__PK_TAX_DEPOSITS_DATE;
    }

    @Override
    public TaxDepositsDate as(String alias) {
        return new TaxDepositsDate(DSL.name(alias), this);
    }

    @Override
    public TaxDepositsDate as(Name alias) {
        return new TaxDepositsDate(alias, this);
    }

    @Override
    public TaxDepositsDate as(Table<?> alias) {
        return new TaxDepositsDate(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public TaxDepositsDate rename(String name) {
        return new TaxDepositsDate(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TaxDepositsDate rename(Name name) {
        return new TaxDepositsDate(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public TaxDepositsDate rename(Table<?> name) {
        return new TaxDepositsDate(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row9 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row9<Integer, Integer, Long, Integer, Integer, Integer, Integer, byte[], Integer> fieldsRow() {
        return (Row9) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function9<? super Integer, ? super Integer, ? super Long, ? super Integer, ? super Integer, ? super Integer, ? super Integer, ? super byte[], ? super Integer, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function9<? super Integer, ? super Integer, ? super Long, ? super Integer, ? super Integer, ? super Integer, ? super Integer, ? super byte[], ? super Integer, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
