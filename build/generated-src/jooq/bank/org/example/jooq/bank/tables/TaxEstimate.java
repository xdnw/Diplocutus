/*
 * This file is generated by jOOQ.
 */
package org.example.jooq.bank.tables;


import java.util.function.Function;

import org.example.jooq.bank.DefaultSchema;
import org.example.jooq.bank.Keys;
import org.example.jooq.bank.tables.records.TaxEstimateRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function5;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TaxEstimate extends TableImpl<TaxEstimateRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>tax_estimate</code>
     */
    public static final TaxEstimate TAX_ESTIMATE = new TaxEstimate();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TaxEstimateRecord> getRecordType() {
        return TaxEstimateRecord.class;
    }

    /**
     * The column <code>tax_estimate.tax_id</code>.
     */
    public final TableField<TaxEstimateRecord, Integer> TAX_ID = createField(DSL.name("tax_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>tax_estimate.min_cash</code>.
     */
    public final TableField<TaxEstimateRecord, Integer> MIN_CASH = createField(DSL.name("min_cash"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>tax_estimate.max_cash</code>.
     */
    public final TableField<TaxEstimateRecord, Integer> MAX_CASH = createField(DSL.name("max_cash"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>tax_estimate.min_rss</code>.
     */
    public final TableField<TaxEstimateRecord, Integer> MIN_RSS = createField(DSL.name("min_rss"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>tax_estimate.max_rss</code>.
     */
    public final TableField<TaxEstimateRecord, Integer> MAX_RSS = createField(DSL.name("max_rss"), SQLDataType.INTEGER.nullable(false), this, "");

    private TaxEstimate(Name alias, Table<TaxEstimateRecord> aliased) {
        this(alias, aliased, null);
    }

    private TaxEstimate(Name alias, Table<TaxEstimateRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>tax_estimate</code> table reference
     */
    public TaxEstimate(String alias) {
        this(DSL.name(alias), TAX_ESTIMATE);
    }

    /**
     * Create an aliased <code>tax_estimate</code> table reference
     */
    public TaxEstimate(Name alias) {
        this(alias, TAX_ESTIMATE);
    }

    /**
     * Create a <code>tax_estimate</code> table reference
     */
    public TaxEstimate() {
        this(DSL.name("tax_estimate"), null);
    }

    public <O extends Record> TaxEstimate(Table<O> child, ForeignKey<O, TaxEstimateRecord> key) {
        super(child, key, TAX_ESTIMATE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public UniqueKey<TaxEstimateRecord> getPrimaryKey() {
        return Keys.TAX_ESTIMATE__PK_TAX_ESTIMATE;
    }

    @Override
    public TaxEstimate as(String alias) {
        return new TaxEstimate(DSL.name(alias), this);
    }

    @Override
    public TaxEstimate as(Name alias) {
        return new TaxEstimate(alias, this);
    }

    @Override
    public TaxEstimate as(Table<?> alias) {
        return new TaxEstimate(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public TaxEstimate rename(String name) {
        return new TaxEstimate(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TaxEstimate rename(Name name) {
        return new TaxEstimate(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public TaxEstimate rename(Table<?> name) {
        return new TaxEstimate(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Integer, Integer, Integer, Integer, Integer> fieldsRow() {
        return (Row5) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function5<? super Integer, ? super Integer, ? super Integer, ? super Integer, ? super Integer, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function5<? super Integer, ? super Integer, ? super Integer, ? super Integer, ? super Integer, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
