/*
 * This file is generated by jOOQ.
 */
package org.example.jooq.bank.tables;


import java.util.function.Function;

import org.example.jooq.bank.DefaultSchema;
import org.example.jooq.bank.Keys;
import org.example.jooq.bank.tables.records.TaxBracketsRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function4;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TaxBrackets extends TableImpl<TaxBracketsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>TAX_BRACKETS</code>
     */
    public static final TaxBrackets TAX_BRACKETS = new TaxBrackets();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TaxBracketsRecord> getRecordType() {
        return TaxBracketsRecord.class;
    }

    /**
     * The column <code>TAX_BRACKETS.id</code>.
     */
    public final TableField<TaxBracketsRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>TAX_BRACKETS.money</code>.
     */
    public final TableField<TaxBracketsRecord, Integer> MONEY = createField(DSL.name("money"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>TAX_BRACKETS.resources</code>.
     */
    public final TableField<TaxBracketsRecord, Integer> RESOURCES = createField(DSL.name("resources"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>TAX_BRACKETS.date</code>.
     */
    public final TableField<TaxBracketsRecord, Long> DATE = createField(DSL.name("date"), SQLDataType.BIGINT.nullable(false), this, "");

    private TaxBrackets(Name alias, Table<TaxBracketsRecord> aliased) {
        this(alias, aliased, null);
    }

    private TaxBrackets(Name alias, Table<TaxBracketsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>TAX_BRACKETS</code> table reference
     */
    public TaxBrackets(String alias) {
        this(DSL.name(alias), TAX_BRACKETS);
    }

    /**
     * Create an aliased <code>TAX_BRACKETS</code> table reference
     */
    public TaxBrackets(Name alias) {
        this(alias, TAX_BRACKETS);
    }

    /**
     * Create a <code>TAX_BRACKETS</code> table reference
     */
    public TaxBrackets() {
        this(DSL.name("TAX_BRACKETS"), null);
    }

    public <O extends Record> TaxBrackets(Table<O> child, ForeignKey<O, TaxBracketsRecord> key) {
        super(child, key, TAX_BRACKETS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public UniqueKey<TaxBracketsRecord> getPrimaryKey() {
        return Keys.TAX_BRACKETS__PK_TAX_BRACKETS;
    }

    @Override
    public TaxBrackets as(String alias) {
        return new TaxBrackets(DSL.name(alias), this);
    }

    @Override
    public TaxBrackets as(Name alias) {
        return new TaxBrackets(alias, this);
    }

    @Override
    public TaxBrackets as(Table<?> alias) {
        return new TaxBrackets(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public TaxBrackets rename(String name) {
        return new TaxBrackets(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TaxBrackets rename(Name name) {
        return new TaxBrackets(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public TaxBrackets rename(Table<?> name) {
        return new TaxBrackets(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Integer, Integer, Integer, Long> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function4<? super Integer, ? super Integer, ? super Integer, ? super Long, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function4<? super Integer, ? super Integer, ? super Integer, ? super Long, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
