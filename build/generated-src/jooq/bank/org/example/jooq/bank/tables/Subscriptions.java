/*
 * This file is generated by jOOQ.
 */
package org.example.jooq.bank.tables;


import java.util.function.Function;

import org.example.jooq.bank.DefaultSchema;
import org.example.jooq.bank.Keys;
import org.example.jooq.bank.tables.records.SubscriptionsRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function6;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Subscriptions extends TableImpl<SubscriptionsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>SUBSCRIPTIONS</code>
     */
    public static final Subscriptions SUBSCRIPTIONS = new Subscriptions();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SubscriptionsRecord> getRecordType() {
        return SubscriptionsRecord.class;
    }

    /**
     * The column <code>SUBSCRIPTIONS.user</code>.
     */
    public final TableField<SubscriptionsRecord, Long> USER = createField(DSL.name("user"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>SUBSCRIPTIONS.allianceOrNation</code>.
     */
    public final TableField<SubscriptionsRecord, Integer> ALLIANCEORNATION = createField(DSL.name("allianceOrNation"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>SUBSCRIPTIONS.isNation</code>.
     */
    public final TableField<SubscriptionsRecord, Integer> ISNATION = createField(DSL.name("isNation"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>SUBSCRIPTIONS.date</code>.
     */
    public final TableField<SubscriptionsRecord, Long> DATE = createField(DSL.name("date"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>SUBSCRIPTIONS.isReceive</code>.
     */
    public final TableField<SubscriptionsRecord, Integer> ISRECEIVE = createField(DSL.name("isReceive"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>SUBSCRIPTIONS.amount</code>.
     */
    public final TableField<SubscriptionsRecord, Long> AMOUNT = createField(DSL.name("amount"), SQLDataType.BIGINT.nullable(false), this, "");

    private Subscriptions(Name alias, Table<SubscriptionsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Subscriptions(Name alias, Table<SubscriptionsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>SUBSCRIPTIONS</code> table reference
     */
    public Subscriptions(String alias) {
        this(DSL.name(alias), SUBSCRIPTIONS);
    }

    /**
     * Create an aliased <code>SUBSCRIPTIONS</code> table reference
     */
    public Subscriptions(Name alias) {
        this(alias, SUBSCRIPTIONS);
    }

    /**
     * Create a <code>SUBSCRIPTIONS</code> table reference
     */
    public Subscriptions() {
        this(DSL.name("SUBSCRIPTIONS"), null);
    }

    public <O extends Record> Subscriptions(Table<O> child, ForeignKey<O, SubscriptionsRecord> key) {
        super(child, key, SUBSCRIPTIONS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public UniqueKey<SubscriptionsRecord> getPrimaryKey() {
        return Keys.SUBSCRIPTIONS__PK_SUBSCRIPTIONS;
    }

    @Override
    public Subscriptions as(String alias) {
        return new Subscriptions(DSL.name(alias), this);
    }

    @Override
    public Subscriptions as(Name alias) {
        return new Subscriptions(alias, this);
    }

    @Override
    public Subscriptions as(Table<?> alias) {
        return new Subscriptions(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Subscriptions rename(String name) {
        return new Subscriptions(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Subscriptions rename(Name name) {
        return new Subscriptions(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Subscriptions rename(Table<?> name) {
        return new Subscriptions(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<Long, Integer, Integer, Long, Integer, Long> fieldsRow() {
        return (Row6) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function6<? super Long, ? super Integer, ? super Integer, ? super Long, ? super Integer, ? super Long, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function6<? super Long, ? super Integer, ? super Integer, ? super Long, ? super Integer, ? super Long, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
