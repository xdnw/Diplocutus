/*
 * This file is generated by jOOQ.
 */
package org.example.jooq.bank.tables;


import java.util.function.Function;

import org.example.jooq.bank.DefaultSchema;
import org.example.jooq.bank.Keys;
import org.example.jooq.bank.tables.records.LootDiffByTaxIdRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function4;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class LootDiffByTaxId extends TableImpl<LootDiffByTaxIdRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>loot_diff_by_tax_id</code>
     */
    public static final LootDiffByTaxId LOOT_DIFF_BY_TAX_ID = new LootDiffByTaxId();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<LootDiffByTaxIdRecord> getRecordType() {
        return LootDiffByTaxIdRecord.class;
    }

    /**
     * The column <code>loot_diff_by_tax_id.nation_id</code>.
     */
    public final TableField<LootDiffByTaxIdRecord, Integer> NATION_ID = createField(DSL.name("nation_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>loot_diff_by_tax_id.tax_id</code>.
     */
    public final TableField<LootDiffByTaxIdRecord, Integer> TAX_ID = createField(DSL.name("tax_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>loot_diff_by_tax_id.date</code>.
     */
    public final TableField<LootDiffByTaxIdRecord, Integer> DATE = createField(DSL.name("date"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>loot_diff_by_tax_id.resources</code>.
     */
    public final TableField<LootDiffByTaxIdRecord, byte[]> RESOURCES = createField(DSL.name("resources"), SQLDataType.BINARY.nullable(false), this, "");

    private LootDiffByTaxId(Name alias, Table<LootDiffByTaxIdRecord> aliased) {
        this(alias, aliased, null);
    }

    private LootDiffByTaxId(Name alias, Table<LootDiffByTaxIdRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>loot_diff_by_tax_id</code> table reference
     */
    public LootDiffByTaxId(String alias) {
        this(DSL.name(alias), LOOT_DIFF_BY_TAX_ID);
    }

    /**
     * Create an aliased <code>loot_diff_by_tax_id</code> table reference
     */
    public LootDiffByTaxId(Name alias) {
        this(alias, LOOT_DIFF_BY_TAX_ID);
    }

    /**
     * Create a <code>loot_diff_by_tax_id</code> table reference
     */
    public LootDiffByTaxId() {
        this(DSL.name("loot_diff_by_tax_id"), null);
    }

    public <O extends Record> LootDiffByTaxId(Table<O> child, ForeignKey<O, LootDiffByTaxIdRecord> key) {
        super(child, key, LOOT_DIFF_BY_TAX_ID);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public UniqueKey<LootDiffByTaxIdRecord> getPrimaryKey() {
        return Keys.LOOT_DIFF_BY_TAX_ID__PK_LOOT_DIFF_BY_TAX_ID;
    }

    @Override
    public LootDiffByTaxId as(String alias) {
        return new LootDiffByTaxId(DSL.name(alias), this);
    }

    @Override
    public LootDiffByTaxId as(Name alias) {
        return new LootDiffByTaxId(alias, this);
    }

    @Override
    public LootDiffByTaxId as(Table<?> alias) {
        return new LootDiffByTaxId(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public LootDiffByTaxId rename(String name) {
        return new LootDiffByTaxId(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public LootDiffByTaxId rename(Name name) {
        return new LootDiffByTaxId(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public LootDiffByTaxId rename(Table<?> name) {
        return new LootDiffByTaxId(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Integer, Integer, Integer, byte[]> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function4<? super Integer, ? super Integer, ? super Integer, ? super byte[], ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function4<? super Integer, ? super Integer, ? super Integer, ? super byte[], ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
