/*
 * This file is generated by jOOQ.
 */
package org.example.jooq.locutus.tables.records;


import org.example.jooq.locutus.tables.Users;
import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record3;
import org.jooq.Row3;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UsersRecord extends UpdatableRecordImpl<UsersRecord> implements Record3<Integer, Long, String> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>USERS.nation_id</code>.
     */
    public UsersRecord setNationId(Integer value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>USERS.nation_id</code>.
     */
    public Integer getNationId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>USERS.discord_id</code>.
     */
    public UsersRecord setDiscordId(Long value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>USERS.discord_id</code>.
     */
    public Long getDiscordId() {
        return (Long) get(1);
    }

    /**
     * Setter for <code>USERS.discord_name</code>.
     */
    public UsersRecord setDiscordName(String value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>USERS.discord_name</code>.
     */
    public String getDiscordName() {
        return (String) get(2);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row3<Integer, Long, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    @Override
    public Row3<Integer, Long, String> valuesRow() {
        return (Row3) super.valuesRow();
    }

    @Override
    public Field<Integer> field1() {
        return Users.USERS.NATION_ID;
    }

    @Override
    public Field<Long> field2() {
        return Users.USERS.DISCORD_ID;
    }

    @Override
    public Field<String> field3() {
        return Users.USERS.DISCORD_NAME;
    }

    @Override
    public Integer component1() {
        return getNationId();
    }

    @Override
    public Long component2() {
        return getDiscordId();
    }

    @Override
    public String component3() {
        return getDiscordName();
    }

    @Override
    public Integer value1() {
        return getNationId();
    }

    @Override
    public Long value2() {
        return getDiscordId();
    }

    @Override
    public String value3() {
        return getDiscordName();
    }

    @Override
    public UsersRecord value1(Integer value) {
        setNationId(value);
        return this;
    }

    @Override
    public UsersRecord value2(Long value) {
        setDiscordId(value);
        return this;
    }

    @Override
    public UsersRecord value3(String value) {
        setDiscordName(value);
        return this;
    }

    @Override
    public UsersRecord values(Integer value1, Long value2, String value3) {
        value1(value1);
        value2(value2);
        value3(value3);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached UsersRecord
     */
    public UsersRecord() {
        super(Users.USERS);
    }

    /**
     * Create a detached, initialised UsersRecord
     */
    public UsersRecord(Integer nationId, Long discordId, String discordName) {
        super(Users.USERS);

        setNationId(nationId);
        setDiscordId(discordId);
        setDiscordName(discordName);
    }

    /**
     * Create a detached, initialised UsersRecord
     */
    public UsersRecord(org.example.jooq.locutus.tables.pojos.Users value) {
        super(Users.USERS);

        if (value != null) {
            setNationId(value.getNationId());
            setDiscordId(value.getDiscordId());
            setDiscordName(value.getDiscordName());
        }
    }
}
