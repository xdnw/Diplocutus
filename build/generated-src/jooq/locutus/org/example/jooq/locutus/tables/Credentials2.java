/*
 * This file is generated by jOOQ.
 */
package org.example.jooq.locutus.tables;


import java.util.function.Function;

import org.example.jooq.locutus.DefaultSchema;
import org.example.jooq.locutus.Keys;
import org.example.jooq.locutus.tables.records.Credentials2Record;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function4;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Credentials2 extends TableImpl<Credentials2Record> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>CREDENTIALS2</code>
     */
    public static final Credentials2 CREDENTIALS2 = new Credentials2();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<Credentials2Record> getRecordType() {
        return Credentials2Record.class;
    }

    /**
     * The column <code>CREDENTIALS2.discordid</code>.
     */
    public final TableField<Credentials2Record, Long> DISCORDID = createField(DSL.name("discordid"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>CREDENTIALS2.user</code>.
     */
    public final TableField<Credentials2Record, String> USER = createField(DSL.name("user"), SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>CREDENTIALS2.password</code>.
     */
    public final TableField<Credentials2Record, String> PASSWORD = createField(DSL.name("password"), SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>CREDENTIALS2.salt</code>.
     */
    public final TableField<Credentials2Record, String> SALT = createField(DSL.name("salt"), SQLDataType.VARCHAR.nullable(false), this, "");

    private Credentials2(Name alias, Table<Credentials2Record> aliased) {
        this(alias, aliased, null);
    }

    private Credentials2(Name alias, Table<Credentials2Record> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>CREDENTIALS2</code> table reference
     */
    public Credentials2(String alias) {
        this(DSL.name(alias), CREDENTIALS2);
    }

    /**
     * Create an aliased <code>CREDENTIALS2</code> table reference
     */
    public Credentials2(Name alias) {
        this(alias, CREDENTIALS2);
    }

    /**
     * Create a <code>CREDENTIALS2</code> table reference
     */
    public Credentials2() {
        this(DSL.name("CREDENTIALS2"), null);
    }

    public <O extends Record> Credentials2(Table<O> child, ForeignKey<O, Credentials2Record> key) {
        super(child, key, CREDENTIALS2);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public UniqueKey<Credentials2Record> getPrimaryKey() {
        return Keys.CREDENTIALS2__PK_CREDENTIALS2;
    }

    @Override
    public Credentials2 as(String alias) {
        return new Credentials2(DSL.name(alias), this);
    }

    @Override
    public Credentials2 as(Name alias) {
        return new Credentials2(alias, this);
    }

    @Override
    public Credentials2 as(Table<?> alias) {
        return new Credentials2(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Credentials2 rename(String name) {
        return new Credentials2(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Credentials2 rename(Name name) {
        return new Credentials2(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Credentials2 rename(Table<?> name) {
        return new Credentials2(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Long, String, String, String> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function4<? super Long, ? super String, ? super String, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function4<? super Long, ? super String, ? super String, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
