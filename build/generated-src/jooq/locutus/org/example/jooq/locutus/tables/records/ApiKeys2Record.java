/*
 * This file is generated by jOOQ.
 */
package org.example.jooq.locutus.tables.records;


import org.example.jooq.locutus.tables.ApiKeys2;
import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record3;
import org.jooq.Row3;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ApiKeys2Record extends UpdatableRecordImpl<ApiKeys2Record> implements Record3<Integer, Long, Long> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>API_KEYS2.nation_id</code>.
     */
    public ApiKeys2Record setNationId(Integer value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>API_KEYS2.nation_id</code>.
     */
    public Integer getNationId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>API_KEYS2.api_key</code>.
     */
    public ApiKeys2Record setApiKey(Long value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>API_KEYS2.api_key</code>.
     */
    public Long getApiKey() {
        return (Long) get(1);
    }

    /**
     * Setter for <code>API_KEYS2.bot_key</code>.
     */
    public ApiKeys2Record setBotKey(Long value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>API_KEYS2.bot_key</code>.
     */
    public Long getBotKey() {
        return (Long) get(2);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row3<Integer, Long, Long> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    @Override
    public Row3<Integer, Long, Long> valuesRow() {
        return (Row3) super.valuesRow();
    }

    @Override
    public Field<Integer> field1() {
        return ApiKeys2.API_KEYS2.NATION_ID;
    }

    @Override
    public Field<Long> field2() {
        return ApiKeys2.API_KEYS2.API_KEY;
    }

    @Override
    public Field<Long> field3() {
        return ApiKeys2.API_KEYS2.BOT_KEY;
    }

    @Override
    public Integer component1() {
        return getNationId();
    }

    @Override
    public Long component2() {
        return getApiKey();
    }

    @Override
    public Long component3() {
        return getBotKey();
    }

    @Override
    public Integer value1() {
        return getNationId();
    }

    @Override
    public Long value2() {
        return getApiKey();
    }

    @Override
    public Long value3() {
        return getBotKey();
    }

    @Override
    public ApiKeys2Record value1(Integer value) {
        setNationId(value);
        return this;
    }

    @Override
    public ApiKeys2Record value2(Long value) {
        setApiKey(value);
        return this;
    }

    @Override
    public ApiKeys2Record value3(Long value) {
        setBotKey(value);
        return this;
    }

    @Override
    public ApiKeys2Record values(Integer value1, Long value2, Long value3) {
        value1(value1);
        value2(value2);
        value3(value3);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached ApiKeys2Record
     */
    public ApiKeys2Record() {
        super(ApiKeys2.API_KEYS2);
    }

    /**
     * Create a detached, initialised ApiKeys2Record
     */
    public ApiKeys2Record(Integer nationId, Long apiKey, Long botKey) {
        super(ApiKeys2.API_KEYS2);

        setNationId(nationId);
        setApiKey(apiKey);
        setBotKey(botKey);
    }

    /**
     * Create a detached, initialised ApiKeys2Record
     */
    public ApiKeys2Record(org.example.jooq.locutus.tables.pojos.ApiKeys2 value) {
        super(ApiKeys2.API_KEYS2);

        if (value != null) {
            setNationId(value.getNationId());
            setApiKey(value.getApiKey());
            setBotKey(value.getBotKey());
        }
    }
}
