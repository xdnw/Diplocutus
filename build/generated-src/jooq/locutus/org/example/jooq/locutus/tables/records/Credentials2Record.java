/*
 * This file is generated by jOOQ.
 */
package org.example.jooq.locutus.tables.records;


import org.example.jooq.locutus.tables.Credentials2;
import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record4;
import org.jooq.Row4;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Credentials2Record extends UpdatableRecordImpl<Credentials2Record> implements Record4<Long, String, String, String> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>CREDENTIALS2.discordid</code>.
     */
    public Credentials2Record setDiscordid(Long value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>CREDENTIALS2.discordid</code>.
     */
    public Long getDiscordid() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>CREDENTIALS2.user</code>.
     */
    public Credentials2Record setUser(String value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>CREDENTIALS2.user</code>.
     */
    public String getUser() {
        return (String) get(1);
    }

    /**
     * Setter for <code>CREDENTIALS2.password</code>.
     */
    public Credentials2Record setPassword(String value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>CREDENTIALS2.password</code>.
     */
    public String getPassword() {
        return (String) get(2);
    }

    /**
     * Setter for <code>CREDENTIALS2.salt</code>.
     */
    public Credentials2Record setSalt(String value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>CREDENTIALS2.salt</code>.
     */
    public String getSalt() {
        return (String) get(3);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row4<Long, String, String, String> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    @Override
    public Row4<Long, String, String, String> valuesRow() {
        return (Row4) super.valuesRow();
    }

    @Override
    public Field<Long> field1() {
        return Credentials2.CREDENTIALS2.DISCORDID;
    }

    @Override
    public Field<String> field2() {
        return Credentials2.CREDENTIALS2.USER;
    }

    @Override
    public Field<String> field3() {
        return Credentials2.CREDENTIALS2.PASSWORD;
    }

    @Override
    public Field<String> field4() {
        return Credentials2.CREDENTIALS2.SALT;
    }

    @Override
    public Long component1() {
        return getDiscordid();
    }

    @Override
    public String component2() {
        return getUser();
    }

    @Override
    public String component3() {
        return getPassword();
    }

    @Override
    public String component4() {
        return getSalt();
    }

    @Override
    public Long value1() {
        return getDiscordid();
    }

    @Override
    public String value2() {
        return getUser();
    }

    @Override
    public String value3() {
        return getPassword();
    }

    @Override
    public String value4() {
        return getSalt();
    }

    @Override
    public Credentials2Record value1(Long value) {
        setDiscordid(value);
        return this;
    }

    @Override
    public Credentials2Record value2(String value) {
        setUser(value);
        return this;
    }

    @Override
    public Credentials2Record value3(String value) {
        setPassword(value);
        return this;
    }

    @Override
    public Credentials2Record value4(String value) {
        setSalt(value);
        return this;
    }

    @Override
    public Credentials2Record values(Long value1, String value2, String value3, String value4) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached Credentials2Record
     */
    public Credentials2Record() {
        super(Credentials2.CREDENTIALS2);
    }

    /**
     * Create a detached, initialised Credentials2Record
     */
    public Credentials2Record(Long discordid, String user, String password, String salt) {
        super(Credentials2.CREDENTIALS2);

        setDiscordid(discordid);
        setUser(user);
        setPassword(password);
        setSalt(salt);
    }

    /**
     * Create a detached, initialised Credentials2Record
     */
    public Credentials2Record(org.example.jooq.locutus.tables.pojos.Credentials2 value) {
        super(Credentials2.CREDENTIALS2);

        if (value != null) {
            setDiscordid(value.getDiscordid());
            setUser(value.getUser());
            setPassword(value.getPassword());
            setSalt(value.getSalt());
        }
    }
}
