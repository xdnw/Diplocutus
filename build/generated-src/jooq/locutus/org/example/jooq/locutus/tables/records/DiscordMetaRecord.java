/*
 * This file is generated by jOOQ.
 */
package org.example.jooq.locutus.tables.records;


import org.example.jooq.locutus.tables.DiscordMeta;
import org.jooq.Field;
import org.jooq.Record2;
import org.jooq.Record3;
import org.jooq.Row3;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class DiscordMetaRecord extends UpdatableRecordImpl<DiscordMetaRecord> implements Record3<Long, Long, byte[]> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>DISCORD_META.key</code>.
     */
    public DiscordMetaRecord setKey(Long value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>DISCORD_META.key</code>.
     */
    public Long getKey() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>DISCORD_META.id</code>.
     */
    public DiscordMetaRecord setId(Long value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>DISCORD_META.id</code>.
     */
    public Long getId() {
        return (Long) get(1);
    }

    /**
     * Setter for <code>DISCORD_META.value</code>.
     */
    public DiscordMetaRecord setValue(byte[] value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>DISCORD_META.value</code>.
     */
    public byte[] getValue() {
        return (byte[]) get(2);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record2<Long, Long> key() {
        return (Record2) super.key();
    }

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row3<Long, Long, byte[]> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    @Override
    public Row3<Long, Long, byte[]> valuesRow() {
        return (Row3) super.valuesRow();
    }

    @Override
    public Field<Long> field1() {
        return DiscordMeta.DISCORD_META.KEY;
    }

    @Override
    public Field<Long> field2() {
        return DiscordMeta.DISCORD_META.ID;
    }

    @Override
    public Field<byte[]> field3() {
        return DiscordMeta.DISCORD_META.VALUE;
    }

    @Override
    public Long component1() {
        return getKey();
    }

    @Override
    public Long component2() {
        return getId();
    }

    @Override
    public byte[] component3() {
        return getValue();
    }

    @Override
    public Long value1() {
        return getKey();
    }

    @Override
    public Long value2() {
        return getId();
    }

    @Override
    public byte[] value3() {
        return getValue();
    }

    @Override
    public DiscordMetaRecord value1(Long value) {
        setKey(value);
        return this;
    }

    @Override
    public DiscordMetaRecord value2(Long value) {
        setId(value);
        return this;
    }

    @Override
    public DiscordMetaRecord value3(byte[] value) {
        setValue(value);
        return this;
    }

    @Override
    public DiscordMetaRecord values(Long value1, Long value2, byte[] value3) {
        value1(value1);
        value2(value2);
        value3(value3);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached DiscordMetaRecord
     */
    public DiscordMetaRecord() {
        super(DiscordMeta.DISCORD_META);
    }

    /**
     * Create a detached, initialised DiscordMetaRecord
     */
    public DiscordMetaRecord(Long key, Long id, byte[] value) {
        super(DiscordMeta.DISCORD_META);

        setKey(key);
        setId(id);
        setValue(value);
    }

    /**
     * Create a detached, initialised DiscordMetaRecord
     */
    public DiscordMetaRecord(org.example.jooq.locutus.tables.pojos.DiscordMeta value) {
        super(DiscordMeta.DISCORD_META);

        if (value != null) {
            setKey(value.getKey());
            setId(value.getId());
            setValue(value.getValue());
        }
    }
}
