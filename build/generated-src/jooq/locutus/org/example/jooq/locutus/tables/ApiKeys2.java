/*
 * This file is generated by jOOQ.
 */
package org.example.jooq.locutus.tables;


import java.util.function.Function;

import org.example.jooq.locutus.DefaultSchema;
import org.example.jooq.locutus.Keys;
import org.example.jooq.locutus.tables.records.ApiKeys2Record;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function3;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ApiKeys2 extends TableImpl<ApiKeys2Record> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>API_KEYS2</code>
     */
    public static final ApiKeys2 API_KEYS2 = new ApiKeys2();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ApiKeys2Record> getRecordType() {
        return ApiKeys2Record.class;
    }

    /**
     * The column <code>API_KEYS2.nation_id</code>.
     */
    public final TableField<ApiKeys2Record, Integer> NATION_ID = createField(DSL.name("nation_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>API_KEYS2.api_key</code>.
     */
    public final TableField<ApiKeys2Record, Long> API_KEY = createField(DSL.name("api_key"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>API_KEYS2.bot_key</code>.
     */
    public final TableField<ApiKeys2Record, Long> BOT_KEY = createField(DSL.name("bot_key"), SQLDataType.BIGINT, this, "");

    private ApiKeys2(Name alias, Table<ApiKeys2Record> aliased) {
        this(alias, aliased, null);
    }

    private ApiKeys2(Name alias, Table<ApiKeys2Record> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>API_KEYS2</code> table reference
     */
    public ApiKeys2(String alias) {
        this(DSL.name(alias), API_KEYS2);
    }

    /**
     * Create an aliased <code>API_KEYS2</code> table reference
     */
    public ApiKeys2(Name alias) {
        this(alias, API_KEYS2);
    }

    /**
     * Create a <code>API_KEYS2</code> table reference
     */
    public ApiKeys2() {
        this(DSL.name("API_KEYS2"), null);
    }

    public <O extends Record> ApiKeys2(Table<O> child, ForeignKey<O, ApiKeys2Record> key) {
        super(child, key, API_KEYS2);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public UniqueKey<ApiKeys2Record> getPrimaryKey() {
        return Keys.API_KEYS2__PK_API_KEYS2;
    }

    @Override
    public ApiKeys2 as(String alias) {
        return new ApiKeys2(DSL.name(alias), this);
    }

    @Override
    public ApiKeys2 as(Name alias) {
        return new ApiKeys2(alias, this);
    }

    @Override
    public ApiKeys2 as(Table<?> alias) {
        return new ApiKeys2(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public ApiKeys2 rename(String name) {
        return new ApiKeys2(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ApiKeys2 rename(Name name) {
        return new ApiKeys2(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public ApiKeys2 rename(Table<?> name) {
        return new ApiKeys2(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Integer, Long, Long> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function3<? super Integer, ? super Long, ? super Long, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function3<? super Integer, ? super Long, ? super Long, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
