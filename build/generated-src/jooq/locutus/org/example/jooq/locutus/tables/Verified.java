/*
 * This file is generated by jOOQ.
 */
package org.example.jooq.locutus.tables;


import java.util.function.Function;

import org.example.jooq.locutus.DefaultSchema;
import org.example.jooq.locutus.Keys;
import org.example.jooq.locutus.tables.records.VerifiedRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function1;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row1;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Verified extends TableImpl<VerifiedRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>VERIFIED</code>
     */
    public static final Verified VERIFIED = new Verified();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<VerifiedRecord> getRecordType() {
        return VerifiedRecord.class;
    }

    /**
     * The column <code>VERIFIED.nation_id</code>.
     */
    public final TableField<VerifiedRecord, Integer> NATION_ID = createField(DSL.name("nation_id"), SQLDataType.INTEGER.nullable(false), this, "");

    private Verified(Name alias, Table<VerifiedRecord> aliased) {
        this(alias, aliased, null);
    }

    private Verified(Name alias, Table<VerifiedRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>VERIFIED</code> table reference
     */
    public Verified(String alias) {
        this(DSL.name(alias), VERIFIED);
    }

    /**
     * Create an aliased <code>VERIFIED</code> table reference
     */
    public Verified(Name alias) {
        this(alias, VERIFIED);
    }

    /**
     * Create a <code>VERIFIED</code> table reference
     */
    public Verified() {
        this(DSL.name("VERIFIED"), null);
    }

    public <O extends Record> Verified(Table<O> child, ForeignKey<O, VerifiedRecord> key) {
        super(child, key, VERIFIED);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public UniqueKey<VerifiedRecord> getPrimaryKey() {
        return Keys.VERIFIED__PK_VERIFIED;
    }

    @Override
    public Verified as(String alias) {
        return new Verified(DSL.name(alias), this);
    }

    @Override
    public Verified as(Name alias) {
        return new Verified(alias, this);
    }

    @Override
    public Verified as(Table<?> alias) {
        return new Verified(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Verified rename(String name) {
        return new Verified(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Verified rename(Name name) {
        return new Verified(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Verified rename(Table<?> name) {
        return new Verified(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row1 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row1<Integer> fieldsRow() {
        return (Row1) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function1<? super Integer, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function1<? super Integer, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
