/*
 * This file is generated by jOOQ.
 */
package org.example.jooq.trade.tables.records;


import org.example.jooq.trade.tables.Tradeprice;
import org.jooq.Field;
import org.jooq.Record3;
import org.jooq.Row3;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TradepriceRecord extends UpdatableRecordImpl<TradepriceRecord> implements Record3<Integer, Integer, Integer> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>TRADEPRICE.resource</code>.
     */
    public TradepriceRecord setResource(Integer value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>TRADEPRICE.resource</code>.
     */
    public Integer getResource() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>TRADEPRICE.ppu</code>.
     */
    public TradepriceRecord setPpu(Integer value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>TRADEPRICE.ppu</code>.
     */
    public Integer getPpu() {
        return (Integer) get(1);
    }

    /**
     * Setter for <code>TRADEPRICE.isBuy</code>.
     */
    public TradepriceRecord setIsbuy(Integer value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>TRADEPRICE.isBuy</code>.
     */
    public Integer getIsbuy() {
        return (Integer) get(2);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record3<Integer, Integer, Integer> key() {
        return (Record3) super.key();
    }

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row3<Integer, Integer, Integer> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    @Override
    public Row3<Integer, Integer, Integer> valuesRow() {
        return (Row3) super.valuesRow();
    }

    @Override
    public Field<Integer> field1() {
        return Tradeprice.TRADEPRICE.RESOURCE;
    }

    @Override
    public Field<Integer> field2() {
        return Tradeprice.TRADEPRICE.PPU;
    }

    @Override
    public Field<Integer> field3() {
        return Tradeprice.TRADEPRICE.ISBUY;
    }

    @Override
    public Integer component1() {
        return getResource();
    }

    @Override
    public Integer component2() {
        return getPpu();
    }

    @Override
    public Integer component3() {
        return getIsbuy();
    }

    @Override
    public Integer value1() {
        return getResource();
    }

    @Override
    public Integer value2() {
        return getPpu();
    }

    @Override
    public Integer value3() {
        return getIsbuy();
    }

    @Override
    public TradepriceRecord value1(Integer value) {
        setResource(value);
        return this;
    }

    @Override
    public TradepriceRecord value2(Integer value) {
        setPpu(value);
        return this;
    }

    @Override
    public TradepriceRecord value3(Integer value) {
        setIsbuy(value);
        return this;
    }

    @Override
    public TradepriceRecord values(Integer value1, Integer value2, Integer value3) {
        value1(value1);
        value2(value2);
        value3(value3);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached TradepriceRecord
     */
    public TradepriceRecord() {
        super(Tradeprice.TRADEPRICE);
    }

    /**
     * Create a detached, initialised TradepriceRecord
     */
    public TradepriceRecord(Integer resource, Integer ppu, Integer isbuy) {
        super(Tradeprice.TRADEPRICE);

        setResource(resource);
        setPpu(ppu);
        setIsbuy(isbuy);
    }

    /**
     * Create a detached, initialised TradepriceRecord
     */
    public TradepriceRecord(org.example.jooq.trade.tables.pojos.Tradeprice value) {
        super(Tradeprice.TRADEPRICE);

        if (value != null) {
            setResource(value.getResource());
            setPpu(value.getPpu());
            setIsbuy(value.getIsbuy());
        }
    }
}
