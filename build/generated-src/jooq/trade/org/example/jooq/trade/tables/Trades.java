/*
 * This file is generated by jOOQ.
 */
package org.example.jooq.trade.tables;


import java.util.function.Function;

import org.example.jooq.trade.DefaultSchema;
import org.example.jooq.trade.Keys;
import org.example.jooq.trade.tables.records.TradesRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function11;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row11;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Trades extends TableImpl<TradesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>TRADES</code>
     */
    public static final Trades TRADES = new Trades();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TradesRecord> getRecordType() {
        return TradesRecord.class;
    }

    /**
     * The column <code>TRADES.tradeId</code>.
     */
    public final TableField<TradesRecord, Integer> TRADEID = createField(DSL.name("tradeId"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>TRADES.date</code>.
     */
    public final TableField<TradesRecord, Long> DATE = createField(DSL.name("date"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>TRADES.seller</code>.
     */
    public final TableField<TradesRecord, Integer> SELLER = createField(DSL.name("seller"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>TRADES.buyer</code>.
     */
    public final TableField<TradesRecord, Integer> BUYER = createField(DSL.name("buyer"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>TRADES.resource</code>.
     */
    public final TableField<TradesRecord, Integer> RESOURCE = createField(DSL.name("resource"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>TRADES.isBuy</code>.
     */
    public final TableField<TradesRecord, Integer> ISBUY = createField(DSL.name("isBuy"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>TRADES.quantity</code>.
     */
    public final TableField<TradesRecord, Long> QUANTITY = createField(DSL.name("quantity"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>TRADES.ppu</code>.
     */
    public final TableField<TradesRecord, Integer> PPU = createField(DSL.name("ppu"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>TRADES.type</code>.
     */
    public final TableField<TradesRecord, Integer> TYPE = createField(DSL.name("type"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field("0", SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>TRADES.date_accepted</code>.
     */
    public final TableField<TradesRecord, Long> DATE_ACCEPTED = createField(DSL.name("date_accepted"), SQLDataType.BIGINT.nullable(false).defaultValue(DSL.field("0", SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>TRADES.parent_id</code>.
     */
    public final TableField<TradesRecord, Integer> PARENT_ID = createField(DSL.name("parent_id"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field("0", SQLDataType.INTEGER)), this, "");

    private Trades(Name alias, Table<TradesRecord> aliased) {
        this(alias, aliased, null);
    }

    private Trades(Name alias, Table<TradesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>TRADES</code> table reference
     */
    public Trades(String alias) {
        this(DSL.name(alias), TRADES);
    }

    /**
     * Create an aliased <code>TRADES</code> table reference
     */
    public Trades(Name alias) {
        this(alias, TRADES);
    }

    /**
     * Create a <code>TRADES</code> table reference
     */
    public Trades() {
        this(DSL.name("TRADES"), null);
    }

    public <O extends Record> Trades(Table<O> child, ForeignKey<O, TradesRecord> key) {
        super(child, key, TRADES);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public UniqueKey<TradesRecord> getPrimaryKey() {
        return Keys.TRADES__PK_TRADES;
    }

    @Override
    public Trades as(String alias) {
        return new Trades(DSL.name(alias), this);
    }

    @Override
    public Trades as(Name alias) {
        return new Trades(alias, this);
    }

    @Override
    public Trades as(Table<?> alias) {
        return new Trades(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Trades rename(String name) {
        return new Trades(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Trades rename(Name name) {
        return new Trades(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Trades rename(Table<?> name) {
        return new Trades(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row11 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row11<Integer, Long, Integer, Integer, Integer, Integer, Long, Integer, Integer, Long, Integer> fieldsRow() {
        return (Row11) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function11<? super Integer, ? super Long, ? super Integer, ? super Integer, ? super Integer, ? super Integer, ? super Long, ? super Integer, ? super Integer, ? super Long, ? super Integer, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function11<? super Integer, ? super Long, ? super Integer, ? super Integer, ? super Integer, ? super Integer, ? super Long, ? super Integer, ? super Integer, ? super Long, ? super Integer, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
