/*
 * This file is generated by jOOQ.
 */
package org.example.jooq.trade.tables;


import java.util.function.Function;

import org.example.jooq.trade.DefaultSchema;
import org.example.jooq.trade.Keys;
import org.example.jooq.trade.tables.records.TradepriceRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function3;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Tradeprice extends TableImpl<TradepriceRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>TRADEPRICE</code>
     */
    public static final Tradeprice TRADEPRICE = new Tradeprice();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TradepriceRecord> getRecordType() {
        return TradepriceRecord.class;
    }

    /**
     * The column <code>TRADEPRICE.resource</code>.
     */
    public final TableField<TradepriceRecord, Integer> RESOURCE = createField(DSL.name("resource"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>TRADEPRICE.ppu</code>.
     */
    public final TableField<TradepriceRecord, Integer> PPU = createField(DSL.name("ppu"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>TRADEPRICE.isBuy</code>.
     */
    public final TableField<TradepriceRecord, Integer> ISBUY = createField(DSL.name("isBuy"), SQLDataType.INTEGER.nullable(false), this, "");

    private Tradeprice(Name alias, Table<TradepriceRecord> aliased) {
        this(alias, aliased, null);
    }

    private Tradeprice(Name alias, Table<TradepriceRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>TRADEPRICE</code> table reference
     */
    public Tradeprice(String alias) {
        this(DSL.name(alias), TRADEPRICE);
    }

    /**
     * Create an aliased <code>TRADEPRICE</code> table reference
     */
    public Tradeprice(Name alias) {
        this(alias, TRADEPRICE);
    }

    /**
     * Create a <code>TRADEPRICE</code> table reference
     */
    public Tradeprice() {
        this(DSL.name("TRADEPRICE"), null);
    }

    public <O extends Record> Tradeprice(Table<O> child, ForeignKey<O, TradepriceRecord> key) {
        super(child, key, TRADEPRICE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public UniqueKey<TradepriceRecord> getPrimaryKey() {
        return Keys.TRADEPRICE__PK_TRADEPRICE;
    }

    @Override
    public Tradeprice as(String alias) {
        return new Tradeprice(DSL.name(alias), this);
    }

    @Override
    public Tradeprice as(Name alias) {
        return new Tradeprice(alias, this);
    }

    @Override
    public Tradeprice as(Table<?> alias) {
        return new Tradeprice(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Tradeprice rename(String name) {
        return new Tradeprice(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Tradeprice rename(Name name) {
        return new Tradeprice(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Tradeprice rename(Table<?> name) {
        return new Tradeprice(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Integer, Integer, Integer> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function3<? super Integer, ? super Integer, ? super Integer, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function3<? super Integer, ? super Integer, ? super Integer, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
