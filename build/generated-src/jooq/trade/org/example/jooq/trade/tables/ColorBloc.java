/*
 * This file is generated by jOOQ.
 */
package org.example.jooq.trade.tables;


import java.util.function.Function;

import org.example.jooq.trade.DefaultSchema;
import org.example.jooq.trade.Keys;
import org.example.jooq.trade.tables.records.ColorBlocRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function3;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ColorBloc extends TableImpl<ColorBlocRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>COLOR_BLOC</code>
     */
    public static final ColorBloc COLOR_BLOC = new ColorBloc();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ColorBlocRecord> getRecordType() {
        return ColorBlocRecord.class;
    }

    /**
     * The column <code>COLOR_BLOC.id</code>.
     */
    public final TableField<ColorBlocRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>COLOR_BLOC.name</code>.
     */
    public final TableField<ColorBlocRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(32).nullable(false), this, "");

    /**
     * The column <code>COLOR_BLOC.bonus</code>.
     */
    public final TableField<ColorBlocRecord, Integer> BONUS = createField(DSL.name("bonus"), SQLDataType.INTEGER.nullable(false), this, "");

    private ColorBloc(Name alias, Table<ColorBlocRecord> aliased) {
        this(alias, aliased, null);
    }

    private ColorBloc(Name alias, Table<ColorBlocRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>COLOR_BLOC</code> table reference
     */
    public ColorBloc(String alias) {
        this(DSL.name(alias), COLOR_BLOC);
    }

    /**
     * Create an aliased <code>COLOR_BLOC</code> table reference
     */
    public ColorBloc(Name alias) {
        this(alias, COLOR_BLOC);
    }

    /**
     * Create a <code>COLOR_BLOC</code> table reference
     */
    public ColorBloc() {
        this(DSL.name("COLOR_BLOC"), null);
    }

    public <O extends Record> ColorBloc(Table<O> child, ForeignKey<O, ColorBlocRecord> key) {
        super(child, key, COLOR_BLOC);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public UniqueKey<ColorBlocRecord> getPrimaryKey() {
        return Keys.COLOR_BLOC__PK_COLOR_BLOC;
    }

    @Override
    public ColorBloc as(String alias) {
        return new ColorBloc(DSL.name(alias), this);
    }

    @Override
    public ColorBloc as(Name alias) {
        return new ColorBloc(alias, this);
    }

    @Override
    public ColorBloc as(Table<?> alias) {
        return new ColorBloc(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public ColorBloc rename(String name) {
        return new ColorBloc(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ColorBloc rename(Name name) {
        return new ColorBloc(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public ColorBloc rename(Table<?> name) {
        return new ColorBloc(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Integer, String, Integer> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function3<? super Integer, ? super String, ? super Integer, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function3<? super Integer, ? super String, ? super Integer, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
